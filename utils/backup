#!/usr/bin/env bash
set -euo pipefail

# ===================================
# COLORS
# ===================================
RED='\e[0;31m'
GREEN='\e[0;32m'
YELLOW='\e[1;33m'
BLUE='\e[0;34m'
MAGENTA='\e[0;35m'
NC='\e[0m' # No Color

# ===================================
# GLOBAL CONFIGURATION
# ===================================
SCRIPT_NAME="$(basename "$0")"
SCRIPT_VERSION="1.0.0"
DEBUG=false
SILENT=false

# ===================================
# DEFAULT CONFIGURATION
# ===================================
BACKUP_DIR="$HOME/Backups/system"
DESTINATION="$HOME"
TMP_DIR="/tmp"
PORT=8000
NOTIFY=true
VERBOSE=false
COMPRESSION_LEVEL="-0"
OUTPUT_NAME=""
ZIP_NAME=""
DUNST_ID=91190
DIRS_TO_BACKUP=(
	"$HOME/artifacts"
	"$HOME/Backups"
	"$HOME/dockerhub"
	"$HOME/Documents"
	"$HOME/git"
	"$HOME/npm"
	"$HOME/Pictures"
	"$HOME/server"
	"$HOME/work"
)
EXCLUDE_PATTERN=(
	"*/node_modules/*"
	"*/dist/*"
	"*/build/*"
	"*/.next/*"
	"*/.pnpm/*"
	"*.zip"
	"*.tar.gz"
	"*.log"
	"*.tmp"
)

# ===================================
# LOGGING
# ===================================
log() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${BLUE}==> $1${NC}"
	fi
}
warn() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${YELLOW}⚠️  $1${NC}" >&2
	fi
}
success() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${GREEN}✓ $1${NC}"
	fi
}
abort() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${RED}✗ $1${NC}" >&2
	fi
	exit 1
}
debug() {
	if [ "$DEBUG" = "true" ]; then
		echo -e "${MAGENTA}🐞 DEBUG: $1${NC}"
	fi
}

# ========================
# UTILITIES
# ========================
require_cmd() {
	command -v "$1" >/dev/null 2>&1 || abort "'$1' is not installed or not in PATH."
}

notify() {
	$NOTIFY && dunstify "Backup" "$1" -r $DUNST_ID || true
}

notify_progress() {
	local percent="$1"
	local message="$2"
	$NOTIFY && dunstify "Backup Progress" "$message" -h int:value:$percent -r $DUNST_ID || true
}

# ===================================
# COMMANDS
# ===================================
cmd_help() {
	cat <<EOF
Usage: $SCRIPT_NAME <command> [options]

Commands:
  create              Create a backup
  share               Share latest backup via HTTP
  download            Download and restore from remote backup server
  restore             Restore from local .zip backup
  list                List local backup files
  help                Show this help message
  version             Show script version

Options:
  --dir <DIR>         Directory to store backups (default: $BACKUP_DIR)
  --file <FILE>       Path to the local zip file to restore from
  --dest <DIR>        Restore destination directory (default: $DESTINATION)
  --tmp <DIR>         Temp working directory (default: $TMP_DIR)
  --ip                IP address of the remote server to download the backup from
  --port <PORT>       HTTP port to share/download (default: $PORT)
  --output <NAME>     Override output backup file name
  --zip-name <NAME>   Expected zip file to download (default: auto)
  --dirs <D1,D2>      Comma-separated directories to back up
  --exclude <PATTS>   Comma-separated exclude patterns
  --compress <0|9>    Zip compression level (default: 0)
  --no-notify         Disable dunstify popups
  --verbose           Show zip/rsync output live

Examples:
  $SCRIPT_NAME create --dir ~/Backups --dest ~/Restore
  $SCRIPT_NAME share
  $SCRIPT_NAME download
EOF
}

cmd_create() {
	mkdir -p "$BACKUP_DIR"
	local filename="${OUTPUT_NAME:-backup-$(date +%Y%m%d%H%M%S).zip}"
	local path="$BACKUP_DIR/$filename"
	log "Creating: $path"
	notify "Creating backup..."
	local tmp_list
	tmp_list=$(mktemp)
	for dir in "${DIRS_TO_BACKUP[@]}"; do
		if [[ -d "$dir" ]]; then
			find "$dir" -type f | sed "s|^$HOME/||" >>"$tmp_list"
		fi
	done
	pushd "$HOME" >/dev/null
	local zip_args=(-r "$COMPRESSION_LEVEL" "$path" -@)
	for pattern in "${EXCLUDE_PATTERN[@]}"; do
		zip_args+=(-x "$pattern")
	done
	if $VERBOSE; then
		zip -v "${zip_args[@]}" <"$tmp_list"
	else
		(
			zip "${zip_args[@]}" <"$tmp_list" >/dev/null 2>&1
			rm -f "$tmp_list"
		) &
		local zip_pid=$!
		local percent=0 step=3
		while kill -0 "$zip_pid" 2>/dev/null; do
			sleep 1
			percent=$((percent + step))
			[[ $percent -gt 99 ]] && percent=99
			notify_progress "$percent" "Creating backup: $filename ($percent%)"
		done
		wait "$zip_pid"
	fi
	rm -f "$tmp_list"
	popd >/dev/null
	notify_progress 100 "Backup complete: $filename"
	notify "Backup complete: $filename"
	success "Backup ready: $path"
}

cmd_share() {
	require_cmd python3
	require_cmd ln
	[[ ! -d "$BACKUP_DIR" ]] && abort "Backup directory not found: $BACKUP_DIR"
	local latest_zip
	latest_zip=$(ls -1t "$BACKUP_DIR"/backup-*.zip 2>/dev/null | head -n 1)
	[[ -z "$latest_zip" ]] && abort "No backup files to share."
	local filename
	filename=$(basename "$latest_zip")
	local share_dir="$TMP_DIR/backup_share"
	rm -rf "$share_dir" && mkdir -p "$share_dir"
	ln -s "$latest_zip" "$share_dir/$filename"
	cat <<EOF >"$share_dir/index.html"
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="refresh" content="0; url=$filename" />
  </head>
  <body>
    <p>Redirecting to download <a href="$filename">$filename</a>...</p>
  </body>
</html>
EOF
	local ip
	ip=$(hostname -I | awk '{print $1}')
	log "Serving backup at: http://$ip:$PORT/"
	notify "Sharing: $filename"
	cd "$share_dir"
	python3 -m http.server "$PORT" >/dev/null 2>&1
}

cmd_restore() {
	local file="$1"
	[[ ! -f "$file" ]] && {
		abort "File not found: $file"
	}
	notify "Restoring from $file"
	unzip "$file" -d "$TMP_DIR"
	local source="$TMP_DIR"
	local total=$(find "$source" -type f 2>/dev/null | wc -l)
	[[ "$total" -eq 0 ]] && total=100
	local count=0
	local prev_percent=0
	notify_progress 0 "Restoring from $file (0%)"
	rsync -av --log=progress2 --remove-source-files --ignore-existing "$source/" "$DESTINATION/" | while read -r line; do
		if [[ "$line" =~ to-check ]]; then
			((count++))
			local percent=$((100 * count / total))
			[[ $percent -gt 100 ]] && percent=100
			if [[ $percent -ne $prev_percent ]]; then
				prev_percent=$percent
				notify_progress "$percent" "Restoring from $file ($percent%)"
			fi
		fi
	done
	notify_progress 100 "Restore complete"
	notify "Restore complete: $file"
	success "Restore complete: $file"
}

cmd_download() {
	local ip="$1"
	local url="http://$ip:$PORT"
	local out_path="$TMP_DIR"
	log "⬇Downloading from: $url"
	wget -q -O "$out_path" "$url" || {
		abort "Download failed"
	}
	cmd_restore "$out_path"
}

cmd_list() {
	log "Backups in $BACKUP_DIR:"
	ls -lh "$BACKUP_DIR"/*.zip 2>/dev/null || log "No backups found."
}

cmd_version() {
	echo "$SCRIPT_NAME version $SCRIPT_VERSION"
}

# ===================================
# MAIN LOGIC
# ===================================
main() {
	local cmd="${1:-}"
	shift || true

	while [[ $# -gt 0 ]]; do
		case "$1" in
		--dir)
			BACKUP_DIR="$2"
			shift
			;;
		--dest)
			DESTINATION="$2"
			shift
			;;
		--tmp)
			TMP_DIR="$2"
			shift
			;;
		--file)
			ZIP_FILE="$2"
			shift
			;;
		--ip)
			IP_ADDRESS="$2"
			shift
			;;
		--port)
			PORT="$2"
			shift
			;;
		--output)
			OUTPUT_NAME="$2"
			shift
			;;
		--zip-name)
			ZIP_NAME="$2"
			shift
			;;
		--dirs)
			IFS=',' read -ra DIRS_TO_BACKUP <<<"$2"
			shift
			;;
		--exclude)
			IFS=',' read -ra EXCLUDE_PATTERN <<<"$2"
			shift
			;;
		--compress)
			COMPRESSION_LEVEL="-$2"
			shift
			;;
		--no-notify)
			NOTIFY=false
			shift
			;;
		--verbose)
			VERBOSE=true
			shift
			;;
		--*)
			abort "Unknown option: $1"
			;;
		*)
			[[ -z "$cmd" ]] && cmd="$1" || abort "Multiple commands not allowed"
			;;
		esac
		shift
	done

	case "$cmd" in
	create) cmd_create ;;
	share) cmd_share ;;
	download)
		[[ -z "$IP_ADDRESS" ]] && abort "Missing --ip option for download command"
		cmd_download "$IP_ADDRESS"
		;;
	restore)
		[[ -z "$ZIP_FILE" ]] && abort "Missing --file option for restore command"
		cmd_restore "$ZIP_FILE"
		;;
	list) cmd_list ;;
	help | "")
		cmd_help
		;;
	version)
		cmd_version
		;;
	*)
		abort "Unknown command: $cmd. Use '$SCRIPT_NAME help' to list available commands."
		;;
	esac
}

main "$@"
