#!/usr/bin/env bash

set -euo pipefail

# =============================
# Defaults
# =============================
BACKUP_DIR="$HOME/Documents/Backups"
DESTINATION="$HOME"
TMP_DIR="/tmp"
PORT=8000
NOTIFY=true
VERBOSE=false
COMPRESSION_LEVEL="-0"
OUTPUT_NAME=""
ZIP_NAME=""
DUNST_ID=91190

DIRS_TO_BACKUP=(
  "$HOME/.ssh"
  "$HOME/git"
  "$HOME/npm"
  "$HOME/work"
  "$HOME/server"
  "$HOME/Documents"
  "$HOME/Pictures"
)

EXCLUDE_PATTERN=(
  "*/node_modules/*"
  "*/dist/*"
  "*/build/*"
  "*/.next/*"
  "*/.pnpm/*"
  "*.zip"
  "*.tar.gz"
  "*.log"
  "*.tmp"
)

# =============================
# Helpers
# =============================
notify() {
  $NOTIFY && dunstify "Backup" "$1" -r $DUNST_ID || true
}

notify_progress() {
  local percent="$1"
  local message="$2"
  $NOTIFY && dunstify "Backup Progress" "$message" -h int:value:$percent -r $DUNST_ID || true
}

handle_error() {
  local exit_code=$1
  local command="${BASH_COMMAND}"
  if [ $exit_code -ne 0 ]; then
    notify "‚ùå Failed during: $command"
    exit 1
  fi
}
trap 'handle_error $?' ERR

usage() {
  cat <<EOF
Usage: $0 <command> [options]

Commands:
  create              Create a backup
  share               Share latest backup via HTTP
  download <IP>       Download and restore from remote backup server
  restore <FILE>      Restore from local .zip backup
  list                List local backup files

Options:
  --dir <DIR>         Directory to store backups (default: $BACKUP_DIR)
  --dest <DIR>        Restore destination directory (default: $DESTINATION)
  --tmp <DIR>         Temp working directory (default: $TMP_DIR)
  --port <PORT>       HTTP port to share/download (default: $PORT)
  --output <NAME>     Override output backup file name
  --zip-name <NAME>   Expected zip file to download (default: auto)
  --dirs <D1,D2>      Comma-separated directories to back up
  --exclude <PATTS>   Comma-separated exclude patterns
  --compress <0|9>    Zip compression level (default: 0)
  --no-notify         Disable dunstify popups
  --verbose           Show zip/rsync output live
  -h, --help          Show this help
EOF
  exit 1
}

# =============================
# Core Actions
# =============================
create_backup() {
  mkdir -p "$BACKUP_DIR"
  local filename="${OUTPUT_NAME:-bk-$(date +%Y-%m-%d).zip}"
  local path="$BACKUP_DIR/$filename"

  echo "üì¶ Creating: $path"
  notify "Creating backup..."

  # Collect file list
  local tmp_list
  tmp_list=$(mktemp)
  for dir in "${DIRS_TO_BACKUP[@]}"; do
    [[ -d "$dir" ]] && find "$dir" -type f >>"$tmp_list"
  done

  # Build args
  local zip_args=(-r "$COMPRESSION_LEVEL" "$path" -@)
  for pattern in "${EXCLUDE_PATTERN[@]}"; do
    zip_args+=(-x "$pattern")
  done

  if $VERBOSE; then
    zip -v "${zip_args[@]}" <"$tmp_list"
  else
    (
      zip "${zip_args[@]}" <"$tmp_list" >/dev/null 2>&1
      rm -f "$tmp_list"
    ) &
    local zip_pid=$!

    local percent=0 step=3
    while kill -0 "$zip_pid" 2>/dev/null; do
      sleep 1
      percent=$((percent + step))
      [[ $percent -gt 99 ]] && percent=99
      notify_progress "$percent" "Creating backup: $filename ($percent%)"
    done

    wait "$zip_pid"
  fi

  rm -f "$tmp_list"
  notify_progress 100 "‚úÖ Backup complete: $filename"
  notify "‚úÖ Backup complete: $filename"
  echo "‚úÖ Backup ready: $path"
}

share_backup() {
  local ip=$(hostname -I | awk '{print $1}')
  echo "üåç Serving: http://$ip:$PORT"
  cd "$BACKUP_DIR"
  python3 -m http.server "$PORT" >/dev/null 2>&1
}

restore_backup() {
  local file="$1"
  [[ ! -f "$file" ]] && {
    echo "‚ùå File not found: $file"
    exit 1
  }

  notify "Restoring from $file"
  unzip "$file" -d "$TMP_DIR"

  local source="${TMP_DIR}/home/$USER"
  local total=$(find "$source" -type f 2>/dev/null | wc -l)
  [[ "$total" -eq 0 ]] && total=100
  local count=0
  local prev_percent=0

  notify_progress 0 "Restoring from $file (0%)"

  rsync -av --info=progress2 --remove-source-files --ignore-existing "$source/" "$DESTINATION/" | while read -r line; do
    if [[ "$line" =~ to-check ]]; then
      ((count++))
      local percent=$((100 * count / total))
      [[ $percent -gt 100 ]] && percent=100
      if [[ $percent -ne $prev_percent ]]; then
        prev_percent=$percent
        notify_progress "$percent" "Restoring from $file ($percent%)"
      fi
    fi
  done

  notify_progress 100 "‚úÖ Restore complete"
  notify "‚úÖ Restore complete: $file"
  echo "‚úÖ Restore complete: $file"
}

download_backup() {
  local ip="$1"
  local zip="${ZIP_NAME:-bk-$(date +%Y-%m-%d).zip}"
  local url="http://$ip:$PORT/$zip"
  local out_path="$TMP_DIR/$zip"

  echo "‚¨áÔ∏è Downloading from: $url"
  wget -q -O "$out_path" "$url" || {
    echo "‚ùå Download failed"
    exit 1
  }

  restore_backup "$out_path"
}

list_backups() {
  echo "üìÇ Backups in $BACKUP_DIR:"
  ls -lh "$BACKUP_DIR"/*.zip 2>/dev/null || echo "No backups found."
}

# =============================
# Main CLI
# =============================
main() {
  local command="${1:-}"
  shift || true

  while [[ $# -gt 0 ]]; do
    case "$1" in
    --dir)
      shift
      BACKUP_DIR="$1"
      ;;
    --dest)
      shift
      DESTINATION="$1"
      ;;
    --tmp)
      shift
      TMP_DIR="$1"
      ;;
    --port)
      shift
      PORT="$1"
      ;;
    --output)
      shift
      OUTPUT_NAME="$1"
      ;;
    --zip-name)
      shift
      ZIP_NAME="$1"
      ;;
    --dirs)
      shift
      IFS=',' read -ra DIRS_TO_BACKUP <<<"$1"
      ;;
    --exclude)
      shift
      IFS=',' read -ra EXCLUDE_PATTERN <<<"$1"
      ;;
    --compress)
      shift
      COMPRESSION_LEVEL="-$1"
      ;;
    --no-notify) NOTIFY=false ;;
    --verbose) VERBOSE=true ;;
    -h | --help) usage ;;
    *) [[ -z "${POSITIONAL:-}" ]] && POSITIONAL="$1" || POSITIONAL_2="$1" ;;
    esac
    shift
  done

  [[ -z "$command" ]] && usage

  case "$command" in
  create) create_backup ;;
  share) share_backup ;;
  download)
    [[ -z "${POSITIONAL:-}" ]] && echo "‚ùå Missing IP" && usage
    download_backup "$POSITIONAL"
    ;;
  restore)
    [[ -z "${POSITIONAL:-}" ]] && echo "‚ùå Missing file name" && usage
    restore_backup "$POSITIONAL"
    ;;
  list) list_backups ;;
  *)
    echo "Unknown command: $command"
    usage
    ;;
  esac
}

main "$@"
