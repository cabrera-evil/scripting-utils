#!/bin/bash

# =============================
# Backup Management Script
# =============================
# This script can either create a backup of important directories
# or download and restore a backup from a remote server.
#
# Usage:
#   ./script.sh [-c] [-d IP_ADDRESS]
#   -c: Create a backup
#   -d: Download a backup from the specified IP address
#   -s: Share a backup
# =============================

# Set global variables
BACKUP_DIR="$HOME/Documents/Backups"
BACKUP_FILE="bk-$(date +%Y-%m-%d).zip"
DESTINATION="$HOME"
DIRS_TO_BACKUP=(
  "$HOME/git"
  "$HOME/npm"
  "$HOME/work"
  "$HOME/server"
  "$HOME/Documents"
  "$HOME/Pictures"
)
EXCLUDE_PATTERN="*/node_modules/* *.zip"
PORT=8000
TMP_DIR="/tmp"

# =============================
# Function to handle errors
# =============================
handle_error() {
  local exit_code=$1
  local command="${BASH_COMMAND}"
  if [ $exit_code -ne 0 ]; then
    dunstify "Backup" "Backup failed during: $command" -t 2000 -u critical
    exit 1
  fi
}

# Trap errors and run the error handler
trap 'handle_error $?' ERR

# =============================
# Function to display usage
# =============================
usage() {
  echo "Usage: $0 [-c] [-d IP_ADDRESS]"
  echo "  -c: Create a backup"
  echo "  -d: Download a backup from the specified IP address"
  echo "  -s: Share a backup"
  exit 1
}

# =============================
# Function to create a backup
# =============================
create_backup() {
  # Check if backup directory exists
  if [ ! -d "$BACKUP_DIR" ]; then
    mkdir -p "$BACKUP_DIR"
  fi

  # Validate directories before proceeding
  for dir in "${DIRS_TO_BACKUP[@]}"; do
    if [ ! -d "$dir" ]; then
      echo "Directory '$dir' not found."
      exit 1
    fi
  done

  # Compress the directories, excluding specified patterns
  dunstify "Backup" "Creating backup..." -t 2000
  zip -q -r "$BACKUP_DIR/$BACKUP_FILE" "${DIRS_TO_BACKUP[@]}" -x $EXCLUDE_PATTERN

  dunstify "Backup" "Backup created successfully at $BACKUP_DIR/$BACKUP_FILE" -t 2000
  echo "Backup created at $BACKUP_DIR/$BACKUP_FILE"
}

# =============================
# Function to download and restore a backup
# =============================
download_backup() {
  local ip="$1"
  local url="http://${ip}:${PORT}"
  local filename="${TMP_DIR}/$(basename "$BACKUP_FILE")"

  # Download the backup file
  echo "Downloading HTTP from $ip port $PORT ($url)..."
  wget -O "$filename" "$url/$(basename "$filename")"

  # Verify download success
  if [[ ! -f "$filename" ]]; then
    echo "Download failed or file not found."
    exit 1
  fi

  # Decompress and synchronize files
  echo "Decompressing and synchronizing files..."
  unzip "$filename" -d "$TMP_DIR"
  rsync -av --progress --remove-source-files --ignore-existing "${TMP_DIR}/home/$USER/" "$DESTINATION/"

  echo "Files synchronized successfully."
}

# =============================
# Function to share the backup
# =============================
share_backup() {
  local ip=$(hostname -I | cut -d' ' -f1)
  local url="http://${ip}:${PORT}"

  # Start a simple HTTP server to share the backup
  echo "Serving HTTP on $ip port $PORT ($url)"
  cd "$BACKUP_DIR"
  python3 -m http.server "$PORT" >/dev/null 2>&1
}

# =============================
# Main script logic
# =============================
main() {
  local action

  # Parse command line options
  while getopts ":csd:" opt; do
    case $opt in
    c)
      action="create"
      ;;
    d)
      action="download"
      ip="$OPTARG"
      ;;
    s)
      action="share"
      ;;
    *)
      usage
      ;;
    esac
  done

  if [ -z "$action" ]; then
    usage
  fi

  # Execute the chosen action
  case $action in
  create)
    create_backup
    ;;
  download)
    if [ -z "$ip" ]; then
      echo "IP address is required for downloading a backup."
      exit 1
    fi
    download_backup "$ip"
    ;;
  share)
    share_backup
    ;;
  esac
}

# Start the script
main "$@"
