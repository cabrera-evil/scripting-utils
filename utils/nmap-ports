#!/usr/bin/env bash
set -euo pipefail

# ===================================
# METADATA
# ===================================
readonly SCRIPT_NAME="$(basename "$0")"
readonly VERSION="1.1.0"

# ===================================
# COLORS
# ===================================
if [[ -t 1 ]] && [[ "${TERM:-}" != "dumb" ]]; then
	readonly RED=$'\033[0;31m'
	readonly GREEN=$'\033[0;32m'
	readonly YELLOW=$'\033[0;33m'
	readonly BLUE=$'\033[0;34m'
	readonly MAGENTA=$'\033[0;35m'
	readonly BOLD=$'\033[1m'
	readonly DIM=$'\033[2m'
	readonly NC=$'\033[0m'
else
	readonly RED='' GREEN='' YELLOW='' BLUE='' MAGENTA='' BOLD='' DIM='' NC=''
fi

# ===================================
# CONFIGURATION
# ===================================
DEBUG=false
QUIET=false
TARGET=""
TIMING=""
SCAN_OPTIONS=""

# Default configuration
readonly DEFAULT_OUTPUT_DIR="$HOME/Documents/scan_results"
readonly DEFAULT_TIMING="T4"

OUTPUT_DIR="$DEFAULT_OUTPUT_DIR"
TIMING="$DEFAULT_TIMING"

# ===================================
# LOGGING FUNCTIONS
# ===================================
log() { [[ "$QUIET" != true ]] && printf "${BLUE}▶${NC} %s\n" "$*" || true; }
warn() { printf "${YELLOW}⚠${NC} %s\n" "$*" >&2; }
error() { printf "${RED}✗${NC} %s\n" "$*" >&2; }
success() { [[ "$QUIET" != true ]] && printf "${GREEN}✓${NC} %s\n" "$*" || true; }
debug() { [[ "$DEBUG" == true ]] && printf "${MAGENTA}⚈${NC} DEBUG: %s\n" "$*" >&2 || true; }
die() {
	error "$*"
	exit 1
}

# ===================================
# UTILITIES
# ===================================
require_command() {
	local cmd="$1" hint="${2:-$1}"
	command -v "$cmd" >/dev/null 2>&1 || die "'$cmd' not found. Install: $hint"
}

print_summary() {
	printf "\n${BOLD}Nmap Scanner CLI${NC}\n"
	printf "Target:      %s\n" "$TARGET"
	printf "Output Dir:  %s\n" "$OUTPUT_DIR"
	printf "Timing:      %s\n" "$TIMING"
	if [[ -n "$SCAN_OPTIONS" ]]; then
		printf "Options:     %s\n" "$SCAN_OPTIONS"
	fi
}

validate_target() {
	local target="$1"
	if [[ -z "$target" ]]; then
		die "Target is required. Please specify a target IP, hostname, or network range."
	fi
	debug "Validating target: $target"
}

ensure_output_dir() {
	if [[ ! -d "$OUTPUT_DIR" ]]; then
		debug "Creating output directory: $OUTPUT_DIR"
		mkdir -p "$OUTPUT_DIR" || die "Failed to create output directory: $OUTPUT_DIR"
	fi
}

generate_timestamp() {
	date "+%Y%m%d_%H%M%S"
}

sanitize_filename() {
	local input="$1"
	echo "$input" | tr '/' '_' | tr ':' '_' | tr ' ' '_'
}

build_nmap_command() {
	local scan_type="$1" target="$2"
	local base_cmd="nmap"
	local timestamp
	timestamp=$(generate_timestamp)
	local safe_target
	safe_target=$(sanitize_filename "$target")

	case "$scan_type" in
	basic)
		echo "$base_cmd -$TIMING -F -v $SCAN_OPTIONS \"$target\" -oN \"$OUTPUT_DIR/basic_${safe_target}_${timestamp}.txt\""
		;;
	full-tcp)
		echo "$base_cmd -p- -$TIMING -A -v $SCAN_OPTIONS \"$target\" -oN \"$OUTPUT_DIR/full_tcp_${safe_target}_${timestamp}.txt\" -oG \"$OUTPUT_DIR/full_tcp_${safe_target}_${timestamp}.gnmap\" -oX \"$OUTPUT_DIR/full_tcp_${safe_target}_${timestamp}.xml\""
		;;
	full-udp)
		echo "$base_cmd -sS -sU -p T:1-65535,U:1-1000 -$TIMING -A -v $SCAN_OPTIONS \"$target\" -oN \"$OUTPUT_DIR/full_tcp_udp_${safe_target}_${timestamp}.txt\""
		;;
	stealth)
		echo "$base_cmd -sS -$TIMING -v $SCAN_OPTIONS \"$target\" -oN \"$OUTPUT_DIR/stealth_${safe_target}_${timestamp}.txt\""
		;;
	vuln)
		echo "$base_cmd --script vuln -$TIMING -v $SCAN_OPTIONS \"$target\" -oN \"$OUTPUT_DIR/vuln_${safe_target}_${timestamp}.txt\""
		;;
	*)
		die "Unknown scan type: $scan_type"
		;;
	esac
}

execute_scan() {
	local scan_type="$1" target="$2"
	local cmd
	cmd=$(build_nmap_command "$scan_type" "$target")

	debug "Executing command: $cmd"
	log "Starting $scan_type scan on $target..."

	if eval "$cmd"; then
		success "$scan_type scan completed. Results saved to $OUTPUT_DIR/"
	else
		die "$scan_type scan failed. Check nmap output for details."
	fi
}

# ===================================
# COMMANDS
# ===================================
cmd_help() {
	cat <<EOF
${BOLD}${SCRIPT_NAME}${NC} - Network scanning tool using nmap

${BOLD}USAGE:${NC}
  $SCRIPT_NAME [OPTIONS] COMMAND

${BOLD}COMMANDS:${NC}
  ${GREEN}basic${NC}       Perform a basic TCP scan (common ports)
  ${GREEN}full-tcp${NC}    Perform a full TCP port scan (1-65535)
  ${GREEN}full-udp${NC}    Perform a full TCP and UDP port scan
  ${GREEN}stealth${NC}     Perform a stealth SYN scan
  ${GREEN}vuln${NC}        Run vulnerability detection scripts
  ${GREEN}help${NC}        Show this help
  ${GREEN}version${NC}     Show version

${BOLD}OPTIONS:${NC}
  ${YELLOW}--target${NC} <target>             Target IP, hostname, or network range (required)
  ${YELLOW}--output-dir${NC} <path>          Output directory (default: $DEFAULT_OUTPUT_DIR)
  ${YELLOW}--timing${NC} <T0-T5>             Timing template (default: $DEFAULT_TIMING)
  ${YELLOW}--options${NC} <opts>             Additional nmap options
  ${YELLOW}-q, --quiet${NC}                   Minimize output
  ${YELLOW}-d, --debug${NC}                   Enable debug output
  ${YELLOW}-h, --help${NC}                    Show help
  ${YELLOW}-v, --version${NC}                 Show version

${BOLD}TIMING TEMPLATES:${NC}
  T0 (Paranoid)   - Very slow, IDS evasion
  T1 (Sneaky)     - Slow, IDS evasion
  T2 (Polite)     - Slow, less bandwidth/target load
  T3 (Normal)     - Default timing
  T4 (Aggressive) - Fast, assumes fast/reliable network
  T5 (Insane)     - Very fast, assumes extraordinarily fast network

${BOLD}EXAMPLES:${NC}
  $SCRIPT_NAME basic --target 192.168.1.1
  $SCRIPT_NAME full-tcp --target scanme.nmap.org --timing T3
  $SCRIPT_NAME vuln --target 10.0.0.0/24 --output-dir ./scans
  $SCRIPT_NAME stealth --target 192.168.1.0/24 --options "-Pn --top-ports 1000"
EOF
}

cmd_version() {
	printf "%s %s\n" "$SCRIPT_NAME" "$VERSION"
}

cmd_basic() {
	validate_target "$TARGET"
	ensure_output_dir
	execute_scan "basic" "$TARGET"
}

cmd_full_tcp() {
	validate_target "$TARGET"
	ensure_output_dir
	warn "Full TCP scan can take a long time. Consider using --timing T3 or T2 for slower/safer scanning."
	execute_scan "full-tcp" "$TARGET"
}

cmd_full_udp() {
	validate_target "$TARGET"
	ensure_output_dir
	warn "Full TCP/UDP scan can take a very long time and may be resource intensive."
	execute_scan "full-udp" "$TARGET"
}

cmd_stealth() {
	validate_target "$TARGET"
	ensure_output_dir
	execute_scan "stealth" "$TARGET"
}

cmd_vuln() {
	validate_target "$TARGET"
	ensure_output_dir
	warn "Vulnerability scan may trigger security alerts on target systems."
	execute_scan "vuln" "$TARGET"
}

# ===================================
# ARGUMENT PARSING
# ===================================
parse_arguments() {
	while [[ $# -gt 0 ]]; do
		case "$1" in
		--output-dir)
			OUTPUT_DIR="${2:?Missing value for $1}"
			shift 2
			;;
		--timing)
			TIMING="${2:?Missing value for $1}"
			if [[ ! "$TIMING" =~ ^T[0-5]$ ]]; then
				die "Invalid timing template: $TIMING. Use T0-T5."
			fi
			shift 2
			;;
		--target)
			TARGET="${2:?Missing value for $1}"
			shift 2
			;;
		--options)
			SCAN_OPTIONS="${2:?Missing value for $1}"
			shift 2
			;;
		-q | --quiet)
			QUIET=true
			shift
			;;
		-d | --debug)
			DEBUG=true
			shift
			;;
		-h | --help)
			cmd_help
			exit 0
			;;
		-v | --version)
			cmd_version
			exit 0
			;;
		-*)
			die "Unknown option: $1"
			;;
		*)
			shift
			;;
		esac
	done
}

# ===================================
# MAIN
# ===================================
main() {
	local command="${1:-help}"
	parse_arguments "$@"
	require_command nmap "nmap (https://nmap.org/download.html)"

	# Execute command
	case "$command" in
	basic)
		[[ -z "$TARGET" ]] && die "Target is required for $command scan. Use --target <target>"
		print_summary
		cmd_basic
		;;
	full-tcp)
		[[ -z "$TARGET" ]] && die "Target is required for $command scan. Use --target <target>"
		print_summary
		cmd_full_tcp
		;;
	full-udp)
		[[ -z "$TARGET" ]] && die "Target is required for $command scan. Use --target <target>"
		print_summary
		cmd_full_udp
		;;
	stealth)
		[[ -z "$TARGET" ]] && die "Target is required for $command scan. Use --target <target>"
		print_summary
		cmd_stealth
		;;
	vuln)
		[[ -z "$TARGET" ]] && die "Target is required for $command scan. Use --target <target>"
		print_summary
		cmd_vuln
		;;
	help)
		cmd_help
		;;
	version)
		cmd_version
		;;
	*)
		die "Unknown command: '$command'. Use '$SCRIPT_NAME help'."
		;;
	esac
}

main "$@"
