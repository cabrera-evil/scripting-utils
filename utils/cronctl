#!/usr/bin/env bash
set -euo pipefail

# ===================================
# Colors
# ===================================
RED='\e[0;31m'
GREEN='\e[0;32m'
YELLOW='\e[1;33m'
BLUE='\e[0;34m'
MAGENTA='\e[0;35m'
NC='\e[0m' # No Color

# ===================================
# GLOBAL CONFIGURATION
# ===================================
SCRIPT_NAME="$(basename "$0")"
SCRIPT_VERSION="1.0.0"
DEBUG=false
SILENT=false

# ===================================
# DEFAULT CONFIGURATION
# ===================================
CRON_DIR="/opt/cronctl/jobs.d"
CRON_DEST="/etc/cron.d"
IS_ROOT=$([[ $EUID -eq 0 ]] && echo true || echo false)

# ===================================
# Logging
# ===================================
log() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${BLUE}==> $1${NC}"
	fi
}
warn() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${YELLOW}⚠️  $1${NC}" >&2
	fi
}
success() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${GREEN}✓ $1${NC}"
	fi
}
abort() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${RED}✗ $1${NC}" >&2
	fi
	exit 1
}
debug() {
	if [ "$DEBUG" = "true" ]; then
		echo -e "${MAGENTA}🐞 DEBUG: $1${NC}"
	fi
}

# ========================
# UTILITIES
# ========================
require_cmd() {
	command -v "$1" >/dev/null 2>&1 || abort "'$1' is not installed or not in PATH."
}

sanitize_filename() {
	basename "$1" | tr -cd 'a-zA-Z0-9._-'
}

# ===================================
# COMMANDS
# ===================================
cmd_help() {
	cat <<EOF
Usage: $SCRIPT_NAME <command> [options]

Commands:
  list                      List all cronjobs (in /etc/cron.d or user crontab)
  add "<schedule>" "<cmd>"  Add a cronjob (root to /etc/cron.d, user to crontab)
  remove "<pattern>"        Remove cronjob(s) matching pattern
  load [file.conf]          Load .conf file (or all from $CRON_DIR if no file is provided)
  help                      Show this help message
  version                   Show script version

Examples:
  $SCRIPT_NAME list
  $SCRIPT_NAME add "0 3 * * *" "/usr/local/bin/backup.sh"
  $SCRIPT_NAME remove "backup.sh"
  $SCRIPT_NAME load $CRON_DIR/myjob.conf
EOF
}

list_cronjobs() {
	if [[ "$IS_ROOT" == true ]]; then
		log "Listing files in $CRON_DEST:"
		ls -1 "$CRON_DEST"
	else
		log "Current user crontab:"
		crontab -l || echo "(No user cronjobs found)"
	fi
}

add_cronjob() {
	local schedule="$1"
	local command="$2"

	if [[ "$IS_ROOT" == true ]]; then
		local filename="manual-$(date +%s).cron"
		local filepath="$CRON_DEST/$filename"
		echo "$schedule root $command" >"$filepath"
		chmod 644 "$filepath"
		chown root:root "$filepath"
		success "Cronjob written to $filepath"
	else
		(
			crontab -l 2>/dev/null || true
			echo "$schedule $command"
		) | crontab -
		success "User cronjob added: '$schedule $command'"
	fi
}

remove_cronjob() {
	local pattern="$1"

	if [[ "$IS_ROOT" == true ]]; then
		local matched=false
		while IFS= read -r file; do
			rm -f "$file"
			success "Removed $file"
			matched=true
		done < <(grep -l "$pattern" "$CRON_DEST"/* 2>/dev/null || true)

		[[ "$matched" == false ]] && log "No matching files found in $CRON_DEST"
	else
		local tmpfile
		tmpfile=$(mktemp)
		trap 'rm -f "$tmpfile"' EXIT

		crontab -l 2>/dev/null | grep -v "$pattern" >"$tmpfile" || true
		crontab "$tmpfile"
		success "Removed user cronjob(s) matching '$pattern'"
	fi
}

load_cronjobs() {
	local source="${1:-$CRON_DIR}"

	if [[ ! -e "$source" ]]; then
		[[ "$source" == "$CRON_DIR" ]] && mkdir -p "$CRON_DIR"
		log "No such file or directory: '$source'"
		return
	fi

	if [[ -d "$source" ]]; then
		log "Using cron directory '$source'"
		local found=false
		for file in "$source"/*.conf; do
			[[ -f "$file" ]] || continue
			load_cronjobs "$file"
			found=true
		done
		if [[ "$found" == true ]]; then
			success "Loaded all cronjobs from '$source'"
		else
			log "No .conf files found in '$source'"
		fi
		return
	fi

	# At this point: it's a single file
	local file="$source"
	[[ -f "$file" ]] || abort "Config file '$file' not found."

	if [[ "$IS_ROOT" == true ]]; then
		local dest="$CRON_DEST/$(sanitize_filename "$file")"
		cp "$file" "$dest"
		chmod 644 "$dest"
		chown root:root "$dest"
		success "Loaded cronjob from $file to $dest"
	else
		while IFS= read -r line; do
			[[ -z "$line" || "$line" =~ ^# ]] && continue
			(
				crontab -l 2>/dev/null || true
				echo "$line"
			) | crontab -
		done <"$file"
		success "Loaded lines from $file to user crontab"
	fi
}

cmd_version() {
	echo "$SCRIPT_NAME version $SCRIPT_VERSION"
}

# ===================================
# MAIN LOGIC
# ===================================
main() {
	local cmd="${1:-}"
	shift || true

	case "$cmd" in
	list)
		list_cronjobs
		;;
	add)
		[[ $# -eq 2 ]] || abort "add requires <schedule> and <command>"
		add_cronjob "$1" "$2"
		;;
	remove)
		[[ $# -eq 1 ]] || abort "remove requires <pattern>"
		remove_cronjob "$1"
		;;
	load)
		[[ $# -le 1 ]] || abort "load accepts at most one argument"
		load_cronjobs "${1:-}"
		;;
	help | "")
		cmd_help
		;;
	version)
		cmd_version
		;;
	*)
		abort "Unknown command: $cmd. Use '$SCRIPT_NAME help' to list available commands."
		;;
	esac
}

main "$@"
