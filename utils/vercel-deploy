#!/usr/bin/env bash
set -euo pipefail

# ===================================
# Colors
# ===================================
RED='\e[0;31m'
GREEN='\e[0;32m'
YELLOW='\e[1;33m'
BLUE='\e[0;34m'
MAGENTA='\e[0;35m'
NC='\e[0m' # No Color

# ===================================
# GLOBAL CONFIGURATION
# ===================================
SCRIPT_NAME="$(basename "$0")"
SCRIPT_VERSION="1.0.0"
DEBUG=false
SILENT=false

# ===================================
# DEFAULT CONFIGURATION
# ===================================
DEPLOY_ENV="production"

# ===================================
# Logging
# ===================================
log() {
    if [ "$SILENT" != "true" ]; then
        echo -e "${BLUE}==> $1${NC}"
    fi
}
warn() {
    if [ "$SILENT" != "true" ]; then
        echo -e "${YELLOW}⚠️  $1${NC}" >&2
    fi
}
success() {
    if [ "$SILENT" != "true" ]; then
        echo -e "${GREEN}✓ $1${NC}"
    fi
}
abort() {
    if [ "$SILENT" != "true" ]; then
        echo -e "${RED}✗ $1${NC}" >&2
    fi
    exit 1
}
debug() {
    if [ "$DEBUG" = "true" ]; then
        echo -e "${MAGENTA}🐞 DEBUG: $1${NC}"
    fi
}

# ========================
# UTILITIES
# ========================
require_cmd() {
    command -v "$1" >/dev/null 2>&1 || abort "'$1' is not installed or not in PATH."
}

install_vercel_cli() {
    info "Checking Vercel CLI..."
    if command -v vercel &>/dev/null; then
        success "Vercel CLI is already installed."
        return
    fi

    info "Installing Vercel CLI..."
    pnpm add vercel --global || abort "Failed to install Vercel CLI."
    success "Vercel CLI installed successfully."
}

pull_vercel_env() {
    local env="$1"
    info "Pulling Vercel environment variables for $env..."
    vercel pull --yes --environment="$env" || abort "Failed to pull Vercel environment variables."
}

# ===================================
# COMMANDS
# ===================================
cmd_help() {
    cat <<EOF
Usage: $SCRIPT_NAME <command> [options]

Commands:
  build                   Pull env variables and build the project
  deploy                  Deploy the project (after build)
  full                    Pull env, build, and deploy
  help                    Show this help message
  version                 Show script version

Options:
  --env <environment>     Set deployment environment (default: production)
  --help                  Show this help message
  -- [args]               Pass additional arguments to Vercel CLI (only for deploy)

Examples:
  $SCRIPT_NAME build --env preview
  $SCRIPT_NAME deploy --env preview -- --prod
EOF
    exit 1
}

cmd_build() {
    local env="$1"
    local flag="$env"
    [[ "$env" == "production" ]] && flag="prod"

    info "Building the project for $env..."
    vercel build --"$flag" || abort "Build failed."
    success "Build completed successfully."
}

cmd_deploy() {
    local env="$1"
    shift
    local flag="$env"
    [[ "$env" == "production" ]] && flag="prod"

    info "Deploying the project to Vercel ($env)..."
    vercel deploy --"$flag" "$@" || abort "Deployment failed."
    success "Deployment completed successfully."
}

cmd_version() {
    echo "$SCRIPT_NAME version $SCRIPT_VERSION"
}

# ===================================
# MAIN LOGIC
# ===================================
main() {
    require_cmd pnpm
    install_vercel_cli

    local cmd="${1:-}"
    shift || true

    local additional_args=()

    while [[ $# -gt 0 ]]; do
        case "$1" in
        --env)
            DEPLOY_ENV="$2"
            ;;
        --)
            additional_args=("$@")
            break
            ;;
        *)
            [[ -z "$cmd" ]] && cmd="$1" || abort "Multiple commands not allowed"
            ;;
        esac
        shift
    done

    case "$cmd" in
    build)
        pull_vercel_env "$DEPLOY_ENV"
        cmd_build "$DEPLOY_ENV"
        ;;
    deploy)
        cmd_deploy "$DEPLOY_ENV" "${additional_args[@]}"
        ;;
    full)
        pull_vercel_env "$DEPLOY_ENV"
        cmd_build "$DEPLOY_ENV"
        cmd_deploy "$DEPLOY_ENV" "${additional_args[@]}"
        ;;
    help | "")
        cmd_help
        ;;
    version)
        cmd_version
        ;;
    *)
        abort "Unknown command: $cmd. Use '$SCRIPT_NAME help' to list available commands."
        ;;
    esac
}

main "$@"
