#!/usr/bin/env bash

set -euo pipefail

# ===================================
# GLOBAL CONFIGURATION
# ===================================
DEFAULT_DEPLOY_ENV="production"

# ===================================
# UTILITIES
# ===================================

abort() {
    echo "ERROR: $1" >&2
    exit 1
}

info() {
    echo "INFO: $1"
}

success() {
    echo "SUCCESS: $1"
}

usage() {
    cat <<EOF
Usage: $(basename "$0") <command> [options]

Commands:
  build                   Pull env variables and build the project
  deploy                  Deploy the project (after build)
  full                    Pull env, build, and deploy

Options:
  --env <environment>     Set deployment environment (default: production)
  --help                  Show this help message
  -- [args]               Pass additional arguments to Vercel CLI (only for deploy)

Examples:
  ./$(basename "$0") build --env preview
  ./$(basename "$0") deploy --env preview -- --prod
EOF
    exit 1
}

require_cmd() {
    command -v "$1" >/dev/null 2>&1 || abort "'$1' is not installed or not in PATH."
}

# ===================================
# COMMANDS IMPLEMENTATION
# ===================================

install_vercel_cli() {
    info "Checking Vercel CLI..."
    if command -v vercel &>/dev/null; then
        success "Vercel CLI is already installed."
        return
    fi

    info "Installing Vercel CLI..."
    pnpm add vercel --global || abort "Failed to install Vercel CLI."
    success "Vercel CLI installed successfully."
}

pull_vercel_env() {
    local env="$1"
    info "Pulling Vercel environment variables for $env..."
    vercel pull --yes --environment="$env" || abort "Failed to pull Vercel environment variables."
}

build_project() {
    local env="$1"
    local flag="$env"
    [[ "$env" == "production" ]] && flag="prod"

    info "Building the project for $env..."
    vercel build --"$flag" || abort "Build failed."
    success "Build completed successfully."
}

deploy_project() {
    local env="$1"; shift
    local flag="$env"
    [[ "$env" == "production" ]] && flag="prod"

    info "Deploying the project to Vercel ($env)..."
    vercel deploy --"$flag" "$@" || abort "Deployment failed."
    success "Deployment completed successfully."
}

# ===================================
# MAIN CLI PARSER
# ===================================

main() {
    if [[ $# -lt 1 ]]; then
        usage
    fi

    local cmd="$1"
    shift

    local deploy_env="$DEFAULT_DEPLOY_ENV"
    local additional_args=()

    # Parse flags
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --env)
                deploy_env="$2"
                shift 2
                ;;
            --help|-h)
                usage
                ;;
            --)
                shift
                additional_args=("$@")
                break
                ;;
            *)
                abort "Unknown option: $1"
                ;;
        esac
    done

    require_cmd pnpm
    install_vercel_cli

    case "$cmd" in
        build)
            pull_vercel_env "$deploy_env"
            build_project "$deploy_env"
            ;;
        deploy)
            deploy_project "$deploy_env" "${additional_args[@]}"
            ;;
        full)
            pull_vercel_env "$deploy_env"
            build_project "$deploy_env"
            deploy_project "$deploy_env" "${additional_args[@]}"
            ;;
        *)
            abort "Unknown command: $cmd"
            ;;
    esac
}

main "$@"
