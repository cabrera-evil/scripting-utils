#!/usr/bin/env bash

set -euo pipefail

# ===================================
# GLOBAL CONFIGURATION
# ===================================
TAILSCALE_UP_FLAGS=()
POSITIONAL_ARGS=()

# ===================================
# UTILITIES
# ===================================

abort() {
    echo "ERROR: $1" >&2
    exit 1
}

info() {
    echo "INFO: $1"
}

success() {
    echo "SUCCESS: $1"
}

require_cmd() {
    command -v "$1" >/dev/null 2>&1 || abort "'$1' is not installed or not in PATH."
}

parse_flags() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
        --*)
            TAILSCALE_UP_FLAGS+=("$1")
            [[ $# -gt 1 && "$2" != --* ]] && {
                TAILSCALE_UP_FLAGS+=("$2")
                shift
            }
            shift
            ;;
        *)
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
        esac
    done
}

# ===================================
# COMMANDS
# ===================================

install_tailscale() {
    require_cmd curl
    info "Installing Tailscale..."
    curl -fsSL https://tailscale.com/install.sh | sh
    success "Tailscale installed."
}

connect_tailnet() {
    require_cmd tailscale
    info "Connecting to Tailnet with flags: ${TAILSCALE_UP_FLAGS[*]}"
    sudo tailscale up "${TAILSCALE_UP_FLAGS[@]}"
    success "Connected to Tailnet."
}

disconnect_tailnet() {
    require_cmd tailscale
    info "Disconnecting from Tailnet..."
    sudo tailscale down "${TAILSCALE_UP_FLAGS[@]}"
    success "Disconnected from Tailnet."
}

status_tailnet() {
    require_cmd tailscale
    info "Tailscale status:"
    tailscale status "${TAILSCALE_UP_FLAGS[@]}"
}

enable_funnel() {
    require_cmd tailscale
    local ports=("${POSITIONAL_ARGS[@]}")
    [[ ${#ports[@]} -eq 0 ]] && ports=(80)

    info "Enabling Funnel for ports: ${ports[*]}"
    sudo tailscale funnel enable
    for port in "${ports[@]}"; do
        info "Opening Funnel on: $port"
        sudo tailscale funnel --bg $port "${TAILSCALE_UP_FLAGS[@]}"
    done
    success "Funnels enabled."
}

list_funnels() {
    require_cmd tailscale
    info "Active Funnels:"
    tailscale funnel status "${TAILSCALE_UP_FLAGS[@]}" || info "No Funnels found."
}

reset_funnels() {
    require_cmd tailscale
    info "Resetting all Funnels..."
    sudo tailscale funnel reset "${TAILSCALE_UP_FLAGS[@]}"
    success "Funnels reset."
}

serve_ports() {
    require_cmd tailscale
    local ports=("${POSITIONAL_ARGS[@]}")
    [[ ${#ports[@]} -eq 0 ]] && ports=(80)

    for port in "${ports[@]}"; do
        info "Serving HTTPS on Tailnet for: $port"
        sudo tailscale serve https $port "${TAILSCALE_UP_FLAGS[@]}"
    done
    success "Serves configured."
}

list_serves() {
    require_cmd tailscale
    info "Active Serves:"
    tailscale serve status "${TAILSCALE_UP_FLAGS[@]}" || info "No Serve configurations found."
}

reset_serves() {
    require_cmd tailscale
    info "Resetting all Serves..."
    sudo tailscale serve reset "${TAILSCALE_UP_FLAGS[@]}"
    success "Serves reset."
}

# ===================================
# CLI ENTRYPOINT
# ===================================

usage() {
    cat <<EOF
Usage: $(basename "$0") <command> [options]

Commands:
  install                      Install Tailscale on the host.
  connect                      Connect to the Tailnet.
  disconnect                   Disconnect from the Tailnet.
  status                       Show Tailscale status.
  enable-funnel [ports...]     Enable Funnel and open specified ports (default: 80).
  list-funnels                 List active Funnels.
  reset-funnels                Reset all Funnels.
  serve [ports...]             Serve HTTPS for specified ports in the Tailnet (default: 80).
  list-serves                  List active Serves.
  reset-serves                 Reset all Serves.
  help                         Show this help message.

All additional flags after the command are passed directly to 'tailscale up'.
EOF
    exit 1
}

main() {
    local cmd="${1:-}"
    shift || true

    parse_flags "$@"

    case "$cmd" in
    install) install_tailscale ;;
    connect) connect_tailnet ;;
    disconnect) disconnect_tailnet ;;
    status) status_tailnet ;;
    enable-funnel) enable_funnel ;;
    list-funnels) list_funnels ;;
    reset-funnels) reset_funnels ;;
    serve) serve_ports ;;
    list-serves) list_serves ;;
    reset-serves) reset_serves ;;
    help | "") usage ;;
    *) abort "Unknown command: $cmd" ;;
    esac
}

main "$@"
