#!/usr/bin/env bash
set -euo pipefail

# ===================================
# METADATA
# ===================================
readonly SCRIPT_NAME="$(basename "$0")"
readonly VERSION="1.1.0"

# ===================================
# COLORS
# ===================================
if [[ -t 1 ]] && [[ "${TERM:-}" != "dumb" ]]; then
	readonly RED=$'\033[0;31m'
	readonly GREEN=$'\033[0;32m'
	readonly YELLOW=$'\033[0;33m'
	readonly BLUE=$'\033[0;34m'
	readonly MAGENTA=$'\033[0;35m'
	readonly BOLD=$'\033[1m'
	readonly DIM=$'\033[2m'
	readonly NC=$'\033[0m'
else
	readonly RED='' GREEN='' YELLOW='' BLUE='' MAGENTA='' BOLD='' DIM='' NC=''
fi

# ===================================
# CONFIGURATION
# ===================================
DEBUG=false
QUIET=false
CONFIRM_YES=false

# Default configuration
readonly DEFAULT_BUCKET="hub-config-20250105173935589100000001"
readonly DEFAULT_REGION="ca-central-1"
readonly DEFAULT_PROFILE="default"
readonly DEFAULT_S3_PATH="hub"
readonly DEFAULT_CLONED_DIR="./infra"

BUCKET="$DEFAULT_BUCKET"
REGION="${AWS_REGION:-$DEFAULT_REGION}"
PROFILE="${AWS_PROFILE:-$DEFAULT_PROFILE}"
ACCESS_KEY="${AWS_ACCESS_KEY_ID:-}"
SECRET_KEY="${AWS_SECRET_ACCESS_KEY:-}"
SESSION_TOKEN="${AWS_SESSION_TOKEN:-}"
S3_PATH="$DEFAULT_S3_PATH"
LOCAL_DIR="$(pwd)"
CLONED_DIR="$DEFAULT_CLONED_DIR"

declare -a AWS_OPTS

# ===================================
# LOGGING FUNCTIONS
# ===================================
log() { [[ "$QUIET" != true ]] && printf "${BLUE}▶${NC} %s\n" "$*" || true; }
warn() { printf "${YELLOW}⚠${NC} %s\n" "$*" >&2; }
error() { printf "${RED}✗${NC} %s\n" "$*" >&2; }
success() { [[ "$QUIET" != true ]] && printf "${GREEN}✓${NC} %s\n" "$*" || true; }
debug() { [[ "$DEBUG" == true ]] && printf "${MAGENTA}⚈${NC} DEBUG: %s\n" "$*" >&2 || true; }
die() {
	error "$*"
	exit 1
}

# ===================================
# UTILITIES
# ===================================
require_command() {
	local cmd="$1" hint="${2:-$1}"
	command -v "$cmd" >/dev/null 2>&1 || die "'$cmd' not found. Install: $hint"
}

print_summary() {
	printf "\n${BOLD}AWS S3 Hub CLI${NC}\n"
	printf "Bucket:      %s\n" "$BUCKET"
	printf "Region:      %s\n" "$REGION"
	printf "S3 Path:     %s\n" "$S3_PATH"
	if [[ -n "$ACCESS_KEY" ]]; then
		printf "Auth:        Access Key (${ACCESS_KEY:0:8}...)\n"
	else
		printf "Profile:     %s\n" "$PROFILE"
	fi
	printf "Local Dir:   %s\n" "$LOCAL_DIR"
}

build_aws_opts() {
	AWS_OPTS=(--region "$REGION")
	if [[ -n "$ACCESS_KEY" && -n "$SECRET_KEY" ]]; then
		export AWS_ACCESS_KEY_ID="$ACCESS_KEY"
		export AWS_SECRET_ACCESS_KEY="$SECRET_KEY"
		[[ -n "$SESSION_TOKEN" ]] && export AWS_SESSION_TOKEN="$SESSION_TOKEN"
		debug "Using access key authentication"
	else
		AWS_OPTS+=(--profile "$PROFILE")
		debug "Using profile authentication: $PROFILE"
		echo "AWS_OPTS: ${AWS_OPTS[*]}"
	fi
}

detect_s3_subpath() {
	local abs_dir rel_key match_path
	abs_dir=$(realpath "$LOCAL_DIR" | sed "s|/infra/|/hub/|")
	match_path=""

	debug "Detecting S3 subpath for: $abs_dir"

	while IFS= read -r key; do
		rel_key=$(dirname "$key")
		if [[ "$abs_dir" == */"$rel_key" ]]; then
			match_path="$rel_key"
			debug "Found matching path: $match_path"
			break
		fi
	done < <(aws s3 ls "s3://$BUCKET/$S3_PATH/" --recursive "${AWS_OPTS[@]}" 2>/dev/null | awk '{print $4}' || true)

	[[ "$match_path" == "$S3_PATH"* ]] && match_path="${match_path#${S3_PATH%/}/}"
	echo "${match_path:-}"
}

confirm() {
	[[ "$CONFIRM_YES" == true ]] && return 0
	read -r -p "${BOLD}Are you sure? (y/N): ${NC}" ans
	[[ "$ans" == "y" || "$ans" == "Y" ]]
}

# ===================================
# COMMANDS
# ===================================
cmd_help() {
	echo "testing"
	cat <<EOF
${BOLD}${SCRIPT_NAME}${NC} - AWS S3 Hub management tool

${BOLD}USAGE:${NC}
  $SCRIPT_NAME [OPTIONS] COMMAND

${BOLD}COMMANDS:${NC}
  ${GREEN}ls${NC}        List contents in S3 bucket/path
  ${GREEN}clone${NC}     Clone S3 bucket/path to local directory
  ${GREEN}pull${NC}      Download from S3 to local directory (smart sync)
  ${GREEN}push${NC}      Upload from local directory to S3 (with confirmation)
  ${GREEN}help${NC}      Show this help
  ${GREEN}version${NC}   Show version

${BOLD}OPTIONS:${NC}
  ${YELLOW}--bucket${NC} <name>               S3 bucket name (default: $DEFAULT_BUCKET)
  ${YELLOW}--region${NC} <region>             AWS region (default: $DEFAULT_REGION)
  ${YELLOW}--profile${NC} <name>              AWS profile (default: $DEFAULT_PROFILE)
  ${YELLOW}--access-key${NC} <key>            AWS access key ID
  ${YELLOW}--secret-key${NC} <key>            AWS secret access key
  ${YELLOW}--session-token${NC} <token>       AWS session token (for temporary credentials)
  ${YELLOW}--s3-path${NC} <path>              S3 path prefix (default: $DEFAULT_S3_PATH)
  ${YELLOW}--local-dir${NC} <path>            Local directory (default: current directory)
  ${YELLOW}--cloned-dir${NC} <path>           Clone target directory (default: $DEFAULT_CLONED_DIR)
  ${YELLOW}--yes${NC}                         Skip confirmation prompts
  ${YELLOW}-q, --quiet${NC}                   Minimize output
  ${YELLOW}-d, --debug${NC}                   Enable debug output
  ${YELLOW}-h, --help${NC}                    Show help
  ${YELLOW}-v, --version${NC}                 Show version

${BOLD}EXAMPLES:${NC}
  $SCRIPT_NAME ls --region us-west-2
  $SCRIPT_NAME clone --profile myprofile
  $SCRIPT_NAME pull --access-key AKIAEXAMPLE --secret-key secretkey
  $SCRIPT_NAME push --yes --debug
EOF
}

cmd_version() {
	printf "%s %s\n" "$SCRIPT_NAME" "$VERSION"
}

cmd_ls() {
	require_command aws "aws-cli (https://aws.amazon.com/cli/)"
	log "Listing contents of s3://$BUCKET/$S3_PATH/"
	if aws s3 ls "s3://$BUCKET/$S3_PATH/" "${AWS_OPTS[@]}" 2>/dev/null; then
		success "Listed S3 contents successfully"
	else
		die "Failed to list S3 contents. Check your credentials and permissions."
	fi
}

cmd_clone() {
	require_command aws "aws-cli (https://aws.amazon.com/cli/)"
	log "Cloning s3://$BUCKET/$S3_PATH/ to $CLONED_DIR"
	if aws s3 sync "s3://$BUCKET/$S3_PATH/" "$CLONED_DIR" "${AWS_OPTS[@]}" 2>/dev/null; then
		success "Cloned s3://$BUCKET/$S3_PATH/ → $CLONED_DIR"
	else
		die "Failed to clone from S3. Check your credentials and permissions."
	fi
}

cmd_pull() {
	require_command aws "aws-cli (https://aws.amazon.com/cli/)"
	local sub_path
	sub_path=$(detect_s3_subpath)
	local source_path="s3://$BUCKET/$S3_PATH/$sub_path"

	log "Downloading $source_path to $LOCAL_DIR"
	debug "Detected subpath: ${sub_path:-<root>}"

	if aws s3 sync "$source_path" "$LOCAL_DIR" "${AWS_OPTS[@]}" 2>/dev/null; then
		success "Downloaded $source_path → $LOCAL_DIR"
	else
		die "Failed to pull from S3. Check your credentials and permissions."
	fi
}

cmd_push() {
	require_command aws "aws-cli (https://aws.amazon.com/cli/)"
	local sub_path
	sub_path=$(detect_s3_subpath)
	local target_path="s3://$BUCKET/$S3_PATH/$sub_path"

	printf "\n${BOLD}Push Configuration${NC}\n"
	printf "Source:      %s\n" "$LOCAL_DIR"
	printf "Target:      %s\n" "$target_path"
	printf "Subpath:     %s\n" "${sub_path:-<root>}"

	warn "This will upload local files to S3 and may overwrite existing data."
	confirm || die "Push operation cancelled."

	log "Uploading $LOCAL_DIR to $target_path"
	if aws s3 sync "$LOCAL_DIR" "$target_path" "${AWS_OPTS[@]}" 2>/dev/null; then
		success "Uploaded $LOCAL_DIR → $target_path"
	else
		die "Failed to push to S3. Check your credentials and permissions."
	fi
}

# ===================================
# ARGUMENT PARSING
# ===================================
parse_arguments() {
	while [[ $# -gt 0 ]]; do
		case "$1" in
		--bucket)
			BUCKET="${2:?Missing value for $1}"
			shift 2
			;;
		--region)
			REGION="${2:?Missing value for $1}"
			shift 2
			;;
		--profile)
			PROFILE="${2:?Missing value for $1}"
			shift 2
			;;
		--access-key)
			ACCESS_KEY="${2:?Missing value for $1}"
			shift 2
			;;
		--secret-key)
			SECRET_KEY="${2:?Missing value for $1}"
			shift 2
			;;
		--session-token)
			SESSION_TOKEN="${2:?Missing value for $1}"
			shift 2
			;;
		--s3-path)
			S3_PATH="${2:?Missing value for $1}"
			shift 2
			;;
		--local-dir)
			LOCAL_DIR="${2:?Missing value for $1}"
			shift 2
			;;
		--cloned-dir)
			CLONED_DIR="${2:?Missing value for $1}"
			shift 2
			;;
		--yes)
			CONFIRM_YES=true
			shift
			;;
		-q | --quiet)
			QUIET=true
			shift
			;;
		-d | --debug)
			DEBUG=true
			shift
			;;
		-h | --help)
			cmd_help
			exit 0
			;;
		-v | --version)
			cmd_version
			exit 0
			;;
		-*)
			die "Unknown option: $1"
			;;
		*)
			shift
			;;
		esac
	done
}

# ===================================
# MAIN
# ===================================
main() {
	local command="${1:-help}"
	parse_arguments "$@"
	build_aws_opts

	# Execute command
	case "$command" in
	ls)
		cmd_ls
		;;
	clone)
		print_summary
		cmd_clone
		;;
	pull)
		print_summary
		cmd_pull
		;;
	push)
		print_summary
		cmd_push
		;;
	help)
		cmd_help
		;;
	version)
		cmd_version
		;;
	*)
		die "Unknown command: '$command'. Use '$SCRIPT_NAME help'."
		;;
	esac
}

main "$@"
