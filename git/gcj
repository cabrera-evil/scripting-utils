#!/usr/bin/env bash
set -euo pipefail

# ===================================
# Colors
# ===================================
RED='\e[0;31m'
GREEN='\e[0;32m'
YELLOW='\e[1;33m'
BLUE='\e[0;34m'
MAGENTA='\e[0;35m'
NC='\e[0m' # No Color

# ===================================
# GLOBAL CONFIGURATION
# ===================================
SCRIPT_NAME="$(basename "$0")"
SCRIPT_VERSION="1.0.0"
DEBUG=false
SILENT=false

# ===================================
# Logging
# ===================================
log() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${BLUE}==> $1${NC}"
	fi
}
warn() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${YELLOW}⚠️  $1${NC}" >&2
	fi
}
success() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${GREEN}✓ $1${NC}"
	fi
}
abort() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${RED}✗ $1${NC}" >&2
	fi
	exit 1
}
debug() {
	if [ "$DEBUG" = "true" ]; then
		echo -e "${MAGENTA}🐞 DEBUG: $1${NC}"
	fi
}

# ===================================
# UTILITIES
# ===================================
require_cmd() {
	command -v "$1" >/dev/null 2>&1 || abort "'$1' is not installed or not in PATH."
}

# ===================================
# COMMANDS
# ===================================
cmd_help() {
	cat <<EOF
Usage: $SCRIPT_NAME <command> [options]

Commands:
  commit              Commit and push immediately
  schedule            Schedule commit via cron
  help                Show this help message
  version             Show script version

Options:
  --repo <PATH>       Path to the Git repository (required)
  --message <MSG>     Commit message (required)
  --time <HH:MM>      Time to schedule (24h format, required for schedule)
  --date <DATE>       Date (today, tomorrow, or YYYY-MM-DD; default: tomorrow)
  -h, --help          Show this help message

Examples:
  $SCRIPT_NAME commit --repo /path/to/repo --message "Your commit message"
  $SCRIPT_NAME schedule --repo /path/to/repo --message "Scheduled commit" --time 14:30 --date today
  $SCRIPT_NAME schedule --repo /path/to/repo --message "Tomorrow's commit" --time 09:00 --date tomorrow
  $SCRIPT_NAME schedule --repo /path/to/repo --message "Specific date commit" --time 10:00 --date 2023-10-15
EOF
}

cmd_commit_and_push() {
	local repo_path="$1"
	local message="$2"
	[[ -z "$repo_path" || -z "$message" ]] && abort "--repo and --message are required"

	[[ ! -d "$repo_path/.git" ]] && {
		abort "Error: Not a valid Git repository: $repo_path"
	}

	git -C "$repo_path" add .
	git -C "$repo_path" commit -m "$message"
	git -C "$repo_path" push
	success "Commit and push completed at \$(date '+%F %T')"
}

schedule_commit() {
	local time="$1" date="$2" repo="$3" msg="$4"

	[[ "$date" == "today" ]] && date=$(date +%F)
	[[ "$date" == "tomorrow" || -z "$date" ]] && date=$(date -d tomorrow +%F)

	[[ ! "$time" =~ ^[0-9]{2}:[0-9]{2}$ ]] && {
		abort "Invalid time format. Use HH:MM."
	}

	[[ ! "$date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && {
		abort "Invalid date format. Use today, tomorrow, or YYYY-MM-DD."
	}

	[[ ! -d "$repo/.git" ]] && {
		abort "Not a valid Git repository: $repo"
	}

	local hour="${time%%:*}"
	local minute="${time##*:}"
	local day month
	day=$(date -d "$date" +%d)
	month=$(date -d "$date" +%m)
	local script_path=$(realpath "$0")

	(
		crontab -l 2>/dev/null
		echo "$minute $hour $day $month * \"$script_path\" commit --repo \"$repo\" --message \"$msg\""
	) | crontab -

	success "Scheduled commit on $date at $time for repo: $repo"
}

cmd_version() {
	echo "$SCRIPT_NAME version $SCRIPT_VERSION"
}

# ===================================
# MAIN LOGIC
# ===================================
main() {
	local cmd="${1:-}"
	shift || true

	local repo=""
	local message=""
	local time=""
	local date=""

	while [[ $# -gt 0 ]]; do
		case "$1" in
		--repo)
			repo="$2"
			shift
			;;
		--message)
			message="$2"
			shift
			;;
		--time)
			time="$2"
			shift
			;;
		--date)
			date="$2"
			shift
			;;
		--*)
			abort "Unknown option: $1"
			;;
		*)
			[[ -z "$cmd" ]] && cmd="$1" || abort "Multiple commands not allowed"
			;;
		esac
		shift
	done

	case "$cmd" in
	commit)
		cmd_commit_and_push "$repo" "$message"
		;;
	schedule)
		[[ -z "$time" ]] && abort "--time is required for schedule"
		schedule_commit "$time" "$date" "$repo" "$message"
		;;
	help | "")
		cmd_help
		;;
	version)
		cmd_version
		;;
	*)
		abort "Unknown command: $cmd. Use '$SCRIPT_NAME help' to list available commands."
		;;
	esac
}

main "$@"
