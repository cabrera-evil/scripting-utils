#!/usr/bin/env bash
set -euo pipefail

# ===================================
# Colors
# ===================================
RED='\e[0;31m'
GREEN='\e[0;32m'
YELLOW='\e[1;33m'
BLUE='\e[0;34m'
MAGENTA='\e[0;35m'
NC='\e[0m' # No Color

# ===================================
# GLOBAL CONFIGURATION
# ===================================
SCRIPT_NAME="$(basename "$0")"
SCRIPT_VERSION="1.0.0"
DEBUG=false
SILENT=false

# ===================================
# DEFAULT CONFIGURATION
# ===================================
REPO=""
REF="main"
ENVIRONMENT="production"
DESCRIPTION=""
URL=""
IS_PRODUCTION=true
IS_TRANSIENT=false
SLEEP_SECONDS=10

# ===================================
# Logging
# ===================================
log() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${BLUE}==> $1${NC}"
	fi
}
warn() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${YELLOW}⚠️  $1${NC}" >&2
	fi
}
success() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${GREEN}✓ $1${NC}"
	fi
}
abort() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${RED}✗ $1${NC}" >&2
	fi
	exit 1
}
debug() {
	if [ "$DEBUG" = "true" ]; then
		echo -e "${MAGENTA}🐞 DEBUG: $1${NC}"
	fi
}

# ===================================
# UTILITIES
# ===================================
require_cmd() {
	command -v "$1" >/dev/null 2>&1 || abort "'$1' is not installed or not in PATH."
}

# ===================================
# COMMANDS
# ===================================
deploy() {
	[[ -z "$REPO" ]] && abort "Missing --repo"
	[[ -z "$URL" ]] && abort "Missing --url"

	DESCRIPTION="${DESCRIPTION:-Deployment to $URL}"

	DEPLOYMENT_ID=$(gh api repos/$REPO/deployments -X POST \
		-F ref="$REF" \
		-F environment="$ENVIRONMENT" \
		-F description="$DESCRIPTION" \
		-F auto_merge=false \
		-F transient_environment=$IS_TRANSIENT \
		-F production_environment=$IS_PRODUCTION \
		--jq '.id')

	info "Deployment ID: $DEPLOYMENT_ID"

	gh api repos/$REPO/deployments/$DEPLOYMENT_ID/statuses -X POST \
		-f state="in_progress"
	info "Deployment in progress..."

	sleep "$SLEEP_SECONDS"

	gh api repos/$REPO/deployments/$DEPLOYMENT_ID/statuses -X POST \
		-f state="success" \
		-f environment_url="$URL"

	success "Deployment marked as success with URL: $URL"
}

# ===================================
# MAIN LOGIC
# ===================================
show_help() {
	cat <<EOF
Usage: $SCRIPT_NAME <command> [options]

Commands:
  deploy                Create a GitHub deployment and mark it as successful

Options:
  --repo <REPO>         GitHub repo (e.g. user/repo)
  --ref <SHA|BRANCH>    Git ref to deploy (default: main)
  --env <NAME>          Deployment environment (default: production)
  --desc <TEXT>         Deployment description
  --url <URL>           Public environment URL
  --prod                Mark as production environment (default: true)
  --transient           Mark as transient environment (default: false)
  --sleep <SECONDS>     Simulate deployment time (default: 10)
  -h, --help            Show this help

Examples:
  $SCRIPT_NAME deploy --repo user/repo --ref main --env production --desc "Deploy to production" --url https://example.com
EOF
}

main() {
	local cmd="${1:-}"
	shift || true

	while [[ $# -gt 0 ]]; do
		case "$1" in
		--repo)
			REPO="$2"
			shift
			;;
		--ref)
			REF="$2"
			shift
			;;
		--env)
			ENVIRONMENT="$2"
			shift
			;;
		--desc)
			DESCRIPTION="$2"
			shift
			;;
		--url)
			URL="$2"
			shift
			;;
		--prod)
			IS_PRODUCTION=true
			shift
			;;
		--transient)
			IS_TRANSIENT=true
			shift
			;;
		--sleep)
			SLEEP_SECONDS="$2"
			shift
			;;
		--*)
			abort "Unknown option: $1"
			;;
		*)
			[[ -z "$cmd" ]] && cmd="$1" || abort "Multiple commands not allowed"
			;;
		esac
		shift
	done

	case "$cmd" in
	deploy) deploy ;;
	help | "")
		show_help
		;;
	version)
		cmd_version
		;;
	*)
		abort "Unknown command: $cmd. Use '$SCRIPT_NAME help' to list available commands."
		;;
	esac
}

main "$@"
