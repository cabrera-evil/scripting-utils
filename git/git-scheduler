#!/bin/bash

# =============================
# Git Scheduler Script
# =============================
# Automates Git commits and push operations and schedules
# them via cron for later execution.
#
# Usage:
#   ./git-scheduler -r REPO_PATH -m "Commit message"        # Commit and push immediately
#   ./git-scheduler -t HH:MM [-d today|tomorrow|YYYY-MM-DD] -r REPO_PATH -m "Commit message" # Schedule
#       -t: Time in HH:MM (24-hour format)
#       -d: Date (today, tomorrow, or YYYY-MM-DD; default is tomorrow)
#       -r: Repository path
#       -m: Commit message
# =============================

# =============================
# Function to display usage
# =============================
# Display usage instructions
usage() {
  echo "Usage: $0 -r REPO_PATH -m 'Commit message' [-t HH:MM] [-d today|tomorrow|YYYY-MM-DD]"
  echo "  -r REPO_PATH -m 'Commit message'"
  echo "  -t HH:MM [-d today|tomorrow|YYYY-MM-DD] -r REPO_PATH -m 'Commit message'"
  exit 1
}

# Perform commit and push
commit_and_push() {
  local repo_path="$1" commit_msg="$2"

  [[ ! -d $repo_path ]] && {
    echo "Error: Repository not found at $repo_path"
    exit 1
  }

  cd "$repo_path"
  git add .
  git commit -m "$commit_msg"
  git push
  echo "Commit and push completed at $(date '+%Y-%m-%d %H:%M:%S') in repository: $repo_path"
}

# =============================
# Function to schedule a commit
# =============================
schedule_commit() {
  local time="$1" date="$2" repo_path="$3" commit_msg="$4"

  # Handle "today" and "tomorrow" keywords
  if [[ "$date" == "today" ]]; then
    date=$(date '+%Y-%m-%d')
  elif [[ "$date" == "tomorrow" || -z "$date" ]]; then
    date=$(date -d tomorrow '+%Y-%m-%d')
  fi

  # Validate time format
  [[ ! "$time" =~ ^[0-9]{2}:[0-9]{2}$ ]] && {
    echo "Invalid time format. Use HH:MM."
    exit 1
  }
  # Validate date format
  [[ ! "$date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && {
    echo "Invalid date format. Use today, tomorrow, or YYYY-MM-DD."
    exit 1
  }
  [[ ! -d $repo_path ]] && {
    echo "Error: Repository not found at $repo_path"
    exit 1
  }

  # Extract cron components
  local day month hour minute
  day=$(date -d "$date" +'%d') month=$(date -d "$date" +'%m')
  hour=${time%:*} minute=${time#*:}

  # Use the full path to this script in the cron job
  local script_path=$(realpath "$0")

  (
    crontab -l 2>/dev/null
    echo "$minute $hour $day $month * $script_path -r $repo_path -m \"$commit_msg\""
  ) | crontab -

  echo "Scheduled commit and push on $date at $time for repository: $repo_path"
}

# =============================
# Main script logic
# =============================
main() {
  local DATE=""
  local TIME=""
  local REPO_PATH=""
  local COMMIT_MSG=""

  while getopts ":r:m:t:d:" opt; do
    case $opt in
    r) REPO_PATH="$OPTARG" ;;
    m) COMMIT_MSG="$OPTARG" ;;
    t) TIME="$OPTARG" ;;
    d) DATE="$OPTARG" ;;
    *) usage ;;
    esac
  done

  # Validate required parameters
  [[ -z $REPO_PATH || -z $COMMIT_MSG ]] && usage

  # Execute the appropriate action
  if [[ -z $TIME ]]; then
    # No time provided: Perform immediate commit and push
    commit_and_push "$REPO_PATH" "$COMMIT_MSG"
  else
    # Time provided: Schedule the commit and push
    schedule_commit "$TIME" "$DATE" "$REPO_PATH" "$COMMIT_MSG"
  fi
}

# Start the script
main "$@"
