#!/usr/bin/env bash
set -euo pipefail

# ===================================
# Colors
# ===================================
RED='\e[0;31m'
GREEN='\e[0;32m'
YELLOW='\e[1;33m'
BLUE='\e[0;34m'
MAGENTA='\e[0;35m'
NC='\e[0m' # No Color

# ===================================
# GLOBAL CONFIGURATION
# ===================================
SCRIPT_NAME="$(basename "$0")"
SCRIPT_VERSION="1.0.0"
DEBUG=false
SILENT=false

# ===================================
# DEFAULT CONFIGURATION
# ===================================
REPO="$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null ||
	git config --get remote.origin.url | sed -E 's/.*[:\/](.+\/.+)\.git/\1/')"
ENV=""
FILE="secrets.yaml"
INLINE=""
declare -A SECRETS

# ===================================
# Logging
# ===================================
log() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${BLUE}==> $1${NC}"
	fi
}
warn() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${YELLOW}⚠️  $1${NC}" >&2
	fi
}
success() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${GREEN}✓ $1${NC}"
	fi
}
abort() {
	if [ "$SILENT" != "true" ]; then
		echo -e "${RED}✗ $1${NC}" >&2
	fi
	exit 1
}
debug() {
	if [ "$DEBUG" = "true" ]; then
		echo -e "${MAGENTA}🐞 DEBUG: $1${NC}"
	fi
}

# ===================================
# UTILITIES
# ===================================
require_cmd() {
	command -v "$1" >/dev/null 2>&1 || abort "'$1' is not installed or not in PATH."
}

function log_summary() {
	log -e "\nGitHub Secrets CLI"
	echo "──────────────────────────────"
	log "Repo:        $REPO"
	[[ -n "$ENV" ]] && log "Environment: $ENV"
	[[ -n "${FILE:-}" && -f "$FILE" ]] && log "File:        $FILE"
	[[ -n "${INLINE:-}" ]] && log "Inline:      $INLINE"
	echo "──────────────────────────────"
}

function load_secrets() {
	if [[ -n "${FILE:-}" && -f "$FILE" ]]; then
		while IFS= read -r key; do
			# Install yq if not already installed
			if ! command -v yq &>/dev/null; then
				log "🔧 Installing yq..."
				if command -v brew &>/dev/null; then
					brew install yq
				elif command -v apt &>/dev/null; then
					sudo apt install -y yq
				else
					abort "Unsupported package manager. Please install yq manually."
				fi
			fi
			# Parse the YAML file
			value="$(yq -r ".\"$key\"" "$FILE")"
			if [[ "$value" == "null" ]]; then
				log "Skipping key '$key' (no value found)"
				continue
			fi
			SECRETS["$key"]="$value"
		done < <(yq -r 'keys[]' "$FILE")
	fi

	if [[ -n "${INLINE:-}" ]]; then
		IFS=',' read -ra PAIRS <<<"$INLINE"
		for pair in "${PAIRS[@]}"; do
			key="${pair%%=*}"
			value="${pair#*=}"
			SECRETS["$key"]="$value"
		done
	fi

	if [[ "${#SECRETS[@]}" -eq 0 ]]; then
		abort "No secrets found from YAML file or inline input."
	fi
}

# ===================================
# COMMANDS
# ===================================
function cmd_help() {
	cat <<EOF
Usage: $SCRIPT_NAME <command> [options]

Commands:
  apply           Set secrets from file or inline
  delete          Delete secrets parsed from file or inline
  list            List secrets in the repo or environment
  purge           Delete ALL secrets from the repo or environment (danger!)
  help            Show this help message
  version         Show script version

Options:
  -r, --repo       GitHub repo (owner/repo). Default: $REPO
  -e, --env        Environment name (for environment-level secrets)
  -f, --file       File with secrets in KEY=VALUE format (default: $FILE)
  -i, --inline     Inline secrets (comma-separated: FOO=bar,BAR=baz)
  --yes            Skip confirmation prompt for purge

Examples:
  $SCRIPT_NAME apply --file .env.production
  $SCRIPT_NAME delete --inline GH_TOKEN=abc,NPM_TOKEN=xyz
  $SCRIPT_NAME purge --env production --yes
  $SCRIPT_NAME list
EOF
}

function cmd_apply() {
	for key in "${!SECRETS[@]}"; do
		local value="${SECRETS[$key]}"
		if [[ -n "$ENV" ]]; then
			log "Setting env secret: $key"
			gh secret set "$key" --env "$ENV" --body "$value" --repo "$REPO"
		else
			log "Setting repo secret: $key"
			gh secret set "$key" --body "$value" --repo "$REPO"
		fi
	done
}

function cmd_delete() {
	for key in "${!SECRETS[@]}"; do
		if [[ -n "$ENV" ]]; then
			log "Deleting env secret: $key"
			gh secret delete "$key" --env "$ENV" --repo "$REPO" || true
		else
			log "Deleting repo secret: $key"
			gh secret delete "$key" --repo "$REPO" || true
		fi
	done
}

function cmd_list() {
	if [[ -n "$ENV" ]]; then
		log "Environment secrets for '$ENV':"
		gh secret list --env "$ENV" --repo "$REPO"
	else
		log "Repository secrets:"
		gh secret list --repo "$REPO"
	fi
}

function cmd_purge() {
	local scope=("--repo" "$REPO")
	[[ -n "$ENV" ]] && scope+=(--env "$ENV")

	log "This will permanently delete ALL secrets in ${ENV:+environment '$ENV' of }repo '$REPO'."
	if [[ "${CONFIRM_YES:-}" != "true" ]]; then
		read -r -p "Are you sure? (y/N): " confirm
		[[ "$confirm" != "y" && "$confirm" != "Y" ]] && {
			abort "Aborted"
		}
	fi

	mapfile -t secrets < <(gh secret list "${scope[@]}" --json name -q '.[].name')
	if [[ ${#secrets[@]} -eq 0 ]]; then
		log "No secrets to delete."
		return
	fi

	for key in "${secrets[@]}"; do
		log "Deleting secret: $key"
		gh secret delete "$key" "${scope[@]}" || true
	done
}

# ===================================
# MAIN LOGIC
# ===================================
main() {
	cmd="${1:-}"
	shift || true

	while [[ $# -gt 0 ]]; do
		case "$1" in
		-r | --repo)
			REPO="$2"
			;;
		-e | --env)
			ENV="$2"
			;;
		-f | --file)
			FILE="$2"
			;;
		-i | --inline)
			INLINE="$2"
			;;
		--yes) CONFIRM_YES=true ;;
		--*)
			abort "Unknown option: $1"
			;;
		*)
			[[ -z "$cmd" ]] && cmd="$1" || abort "Multiple commands not allowed"
			;;
		esac
		shift
	done

	case "$cmd" in
	apply)
		log_summary
		load_secrets
		cmd_apply
		;;
	delete)
		log_summary
		load_secrets
		cmd_delete
		;;
	list)
		cmd_list
		;;
	purge)
		log_summary
		cmd_purge
		;;
	help | "")
		cmd_help
		;;
	version)
		cmd_version
		;;
	*)
		abort "Unknown command: $cmd. Use '$SCRIPT_NAME help' to list available commands."
		;;
	esac
}

main "$@"
