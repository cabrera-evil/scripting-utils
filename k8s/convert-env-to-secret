#!/bin/bash

# Function to handle errors
handle_error() {
    local exit_code=$1
    local command="${BASH_COMMAND}"
    if [ $exit_code -ne 0 ]; then
        echo "Error occurred during: $command"
        exit 1
    fi
}

# Trap errors and run the error handler
trap 'handle_error $?' ERR

# =============================
# Function to display usage
# =============================
usage() {
    echo "Usage: $0 -e ENV_FILE -s SECRET_FILE -n NAMESPACE [-c]"
    echo "  -e: Path to the .env file"
    echo "  -s: Path to the output secret file"
    echo "  -n: Kubernetes namespace for the secret"
    echo "  -c: Copy the secret to the clipboard in base64 format (requires xclip)"
    exit 1
}

# =============================
# Function to create Kubernetes secret from .env file
# =============================
create_secret() {
    local env_file="$1"
    local secret_file="$2"
    local namespace="$3"
    local copy_secret="$4"
    local yaml_output=""
    if [[ ! -f "$env_file" ]]; then
        echo "Error: $env_file does not exist."
        exit 1
    fi
    yaml_output="apiVersion: v1
kind: Secret
metadata:
  name: ${namespace}-secret
  namespace: $namespace
type: Opaque
data:"
    while IFS= read -r line || [ -n "$line" ]; do
        if [[ -z "$line" || "$line" == \#* ]]; then
            continue
        fi
        IFS='=' read -r key value <<<"$line"
        if [[ -n "$key" && -n "$value" ]]; then
            encoded_value=$(echo -n "$value" | base64 | tr -d '\n')
            yaml_output+="
            $key: $encoded_value"
        fi
    done <"$env_file"

    if [[ -n "$secret_file" ]]; then
        echo "$yaml_output" >"$secret_file"
        echo "Secret file generated: $secret_file"
    fi

    if [[ "$copy_secret" == true ]]; then
        if command -v xclip >/dev/null 2>&1; then
            echo "$yaml_output" | xclip -selection clipboard
            echo "Secret copied to clipboard (base64 encoded YAML)"
        else
            echo "xclip not found. Please install it to use clipboard copy."
        fi
    fi
}

# =============================
# Main script logic
# =============================
main() {
    local env_file
    local secret_file
    local namespace
    local copy_secret=false

    # Parse command line options
    while getopts ":e:s:n:c" opt; do
        case $opt in
        e)
            env_file="$OPTARG"
            ;;
        s)
            secret_file="$OPTARG"
            ;;
        n)
            namespace="$OPTARG"
            ;;
        c)
            copy_secret=true
            ;;
        *)
            usage
            ;;
        esac
    done

    # Check if all required parameters are provided
    if [[ -z "$env_file" || -z "$namespace" ]]; then
        echo "Error: Missing required arguments."
        usage
    fi

    # Create the Kubernetes secret
    create_secret "$env_file" "$secret_file" "$namespace" "$copy_secret"
}

# Start the script
main "$@"
