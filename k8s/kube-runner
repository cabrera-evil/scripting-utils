#!/usr/bin/env bash
set -euo pipefail

# ===================================
# GLOBAL CONFIGURATION
# ===================================
SCRIPT_NAME="$(basename "$0")"
SCRIPT_VERSION="1.0.0"
DEBUG=false
SILENT=false

# ===================================
# DEFAULT CONFIGURATION
# ===================================
DEFAULT_NAMESPACE="default"
RELEASE_NAME="deploy-chart"
HELM_DIR="$(pwd)"
DEFAULT_VALUES_FILE="values.yaml"

# ===================================
# UTILITIES
# ===================================
abort() {
    echo "ERROR: $1" >&2
    exit 1
}

info() {
    echo "INFO: $1"
}

success() {
    echo "SUCCESS: $1"
}

require_cmd() {
    command -v "$1" >/dev/null 2>&1 || abort "'$1' is not installed or not in PATH."
}

function get_chart_source() {
    if [[ -n "${HELM_REPO:-}" && -n "${CHART_NAME:-}" ]]; then
        helm repo add "$HELM_REPO_NAME" "$HELM_REPO" >/dev/null
        helm repo update >/dev/null
        echo "$HELM_REPO_NAME/$CHART_NAME"
    else
        echo "$HELM_DIR"
    fi
}

function deployment_summary() {
    echo -e "\n📦 Deployment Summary"
    echo -e "────────────────────────────────────────"
    printf "📛 Namespace:   %s\n" "$NAMESPACE"
    printf "🚀 Release:     %s\n" "$RELEASE_NAME"
    [[ -n "${HELM_REPO:-}" ]] && printf "🌐 Chart Repo:  %s\n" "$HELM_REPO"
    [[ -n "${HELM_REPO_NAME:-}" ]] && printf "📚 Repo Alias:  %s\n" "$HELM_REPO_NAME"
    [[ -n "${CHART_NAME:-}" ]] && printf "📦 Chart Name:  %s\n" "$CHART_NAME"
    printf "📂 Chart Dir:   %s\n" "$HELM_DIR"
    printf "📄 Values File: %s\n" "$VALUES_FILE"
    printf "🔧 Stage:       %s\n" "${STAGE:-<none>}"
    echo -e "────────────────────────────────────────\n"
}

# ===================================
# COMMANDS
# ===================================
function cmd_install() {
    helm install "$RELEASE_NAME" "$(get_chart_source)" \
        --namespace "$NAMESPACE" \
        --create-namespace \
        -f "$VALUES_FILE" \
        --debug
}

function cmd_upgrade() {
    helm upgrade --install "$RELEASE_NAME" "$(get_chart_source)" \
        --namespace "$NAMESPACE" \
        --create-namespace \
        -f "$VALUES_FILE" \
        --debug
}

function cmd_uninstall() {
    helm uninstall "$RELEASE_NAME" --namespace "$NAMESPACE"
}

function cmd_logs() {
    POD=$(kubectl get pods -n "$NAMESPACE" -l "app.kubernetes.io/instance=$RELEASE_NAME" -o jsonpath="{.items[0].metadata.name}")
    kubectl logs -f -n "$NAMESPACE" "$POD"
}

function cmd_describe() {
    POD=$(kubectl get pods -n "$NAMESPACE" -l "app.kubernetes.io/instance=$RELEASE_NAME" -o jsonpath="{.items[0].metadata.name}")
    kubectl describe pod "$POD" -n "$NAMESPACE"
}

function cmd_status() {
    helm status "$RELEASE_NAME" -n "$NAMESPACE"
}

cmd_version() {
    echo "$SCRIPT_NAME version $SCRIPT_VERSION"
}

# ===================================
# MAIN LOGIC
# ===================================
function show_help() {
    cat <<EOF
Usage: $SCRIPT_NAME <command> [options]

Commands:
  install       Install the Helm chart
  upgrade       Upgrade the Helm release
  uninstall     Uninstall the Helm release
  logs          Tail logs from the release pod
  describe      Describe the main pod in the release
  status        Show status of Helm release
  help          Show this help message

Options:
  -n, --namespace     Kubernetes namespace (default: $DEFAULT_NAMESPACE)
  -r, --release       Helm release name (default: $RELEASE_NAME)
  -d, --dir           Helm chart directory (default: current directory)
  -f, --values        Custom values file path (relative to --dir or absolute)
  -s, --stage         Deployment stage (uses values.<stage>.yaml in --dir)
  -p, --repo          Remote Helm repo URL (optional)
  -m, --repo-name     Helm repo alias (default: "HELM_REPO_NAME")
  -c, --chart         Chart name in HELM_REPO_NAME repo (required with --repo)

Examples:
  $SCRIPT_NAME install --stage dev
  $SCRIPT_NAME upgrade --repo https://charts.example.com/ --repo-name myrepo --chart mychart
  $SCRIPT_NAME logs -r deploy-chart
EOF
}

function main() {
    local cmd="${1:-}"
    shift || true

    while [[ $# -gt 0 ]]; do
        case $1 in
        -n | --namespace)
            NAMESPACE="$2"
            shift
            ;;
        -r | --release)
            RELEASE_NAME="$2"
            shift
            ;;
        -d | --dir)
            HELM_DIR="$2"
            shift
            ;;
        -f | --values)
            VALUES_FILE="$2"
            shift
            ;;
        -s | --stage)
            STAGE="$2"
            shift
            ;;
        -p | --repo)
            HELM_REPO="$2"
            shift
            ;;
        -m | --repo-name)
            HELM_REPO_NAME="$2"
            shift
            ;;
        -c | --chart)
            CHART_NAME="$2"
            shift
            ;;
        --*)
            abort "Unknown option: $1"
            ;;
        *)
            [[ -z "$cmd" ]] && cmd="$1" || abort "Multiple commands not allowed"
            ;;
        esac
        shift
    done

    if [[ -n "${STAGE:-}" ]]; then
        NAMESPACE="${NAMESPACE:-$DEFAULT_NAMESPACE}-${STAGE}"
        VALUES_FILE="${HELM_DIR}/values.${STAGE}.yaml"
    else
        NAMESPACE="${NAMESPACE:-$DEFAULT_NAMESPACE}"
        VALUES_FILE="${VALUES_FILE:-${HELM_DIR}/${DEFAULT_VALUES_FILE}}"
    fi

    case "$cmd" in
    install) cmd_install ;;
    upgrade) cmd_upgrade ;;
    uninstall) cmd_uninstall ;;
    logs) cmd_logs ;;
    describe) cmd_describe ;;
    status) cmd_status ;;
    help | "")
        show_help
        ;;
    version)
        cmd_version
        ;;
    *)
        abort "Unknown command: $cmd. Use '$SCRIPT_NAME help' to list available commands."
        ;;
    esac
}

main "$@"
