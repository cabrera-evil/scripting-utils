#!/usr/bin/env bash
set -euo pipefail

# ===================================
# GLOBAL CONFIGURATION
# ===================================
SCRIPT_NAME="$(basename "$0")"
SCRIPT_VERSION="1.0.0"
DEBUG=false
SILENT=false

# ===================================
# UTILITIES
# ===================================
abort() {
    echo "ERROR: $1" >&2
    exit 1
}

info() {
    echo "INFO: $1"
}

success() {
    echo "SUCCESS: $1"
}

require_cmd() {
    command -v "$1" >/dev/null 2>&1 || abort "'$1' is not installed or not in PATH."
}

# ===================================
# COMMANDS
# ===================================
cmd_create() {
    local env_file="$1"
    local secret_file="$2"
    local namespace="$3"
    local copy_secret="$4"
    local yaml_output=""
    if [[ ! -f "$env_file" ]]; then
        abort "$env_file does not exist."
    fi
    yaml_output="apiVersion: v1
kind: Secret
metadata:
  name: ${namespace}-secret
  namespace: $namespace
type: Opaque
data:"
    while IFS= read -r line || [ -n "$line" ]; do
        if [[ -z "$line" || "$line" == \#* ]]; then
            continue
        fi
        IFS='=' read -r key value <<<"$line"
        if [[ -n "$key" && -n "$value" ]]; then
            encoded_value=$(echo -n "$value" | base64 | tr -d '\n')
            yaml_output+="
            $key: $encoded_value"
        fi
    done <"$env_file"

    if [[ -n "$secret_file" ]]; then
        echo "$yaml_output" >"$secret_file"
        success "Secret file generated: $secret_file"
    fi

    if [[ "$copy_secret" == true ]]; then
        if command -v xclip >/dev/null 2>&1; then
            echo "$yaml_output" | xclip -selection clipboard
            success "Secret copied to clipboard (base64 encoded YAML)"
        else
            info "xclip not found. Please install it to use clipboard copy."
        fi
    fi
}

cmd_version() {
    echo "$SCRIPT_NAME version $SCRIPT_VERSION"
}

# ===================================
# MAIN LOGIC
# ===================================
show_help() {
    cat <<EOF
Usage: $SCRIPT_NAME <command> [options]

Commands:
  create                    Create a Kubernetes secret from an environment file
  help                      Show this help message
  version                   Show script version

Options:
  -e <ENV_FILE>          Path to the .env file containing environment variables
  -s <SECRET_FILE>       Path to the output secret file (YAML format)
  -n <NAMESPACE>         Kubernetes namespace for the secret
  -c                     Copy the secret to the clipboard in base64 format (requires xclip)

Examples:
  $SCRIPT_NAME create -e .env -s secret.yaml -n my-namespace -c
EOF
}

main() {
    local cmd="${1:-}"
    shift || true

    local env_file
    local secret_file
    local namespace
    local copy_secret=false

    while [[ $# -gt 0 ]]; do
        case $1 in
        -e)
            env_file="$2"
            shift
            ;;
        -s)
            secret_file="$2"
            shift
            ;;
        -n)
            namespace="$2"
            shift
            ;;
        -c)
            copy_secret=true
            shift
            ;;
        --*)
            abort "Unknown option: $1"
            ;;
        *)
            [[ -z "$cmd" ]] && cmd="$1" || abort "Multiple commands not allowed"
            ;;
        esac
        shift
    done

    case "$cmd" in
    create)
        cmd_create "$env_file" "$secret_file" "$namespace" "$copy_secret"
        ;;
    help | "")
        show_help
        ;;
    version)
        cmd_version
        ;;
    *)
        abort "Unknown command: $cmd. Use '$SCRIPT_NAME help' to list available commands."
        ;;
    esac
}

main "$@"
