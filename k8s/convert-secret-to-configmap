#!/bin/bash

# =============================
# Convert Kubernetes Secret to ConfigMap Script
# =============================
# This script reads a Kubernetes secret file, decodes the base64 values,
# and generates a Kubernetes ConfigMap YAML file with readable values.
#
# Usage:
#   ./convert-secret-to-configmap -s SECRET_FILE -c CONFIGMAP_FILE
#   -s: Path to the input secret file
#   -c: Path to the output ConfigMap file
# =============================

# Function to handle errors
handle_error() {
    local exit_code=$1
    local command="${BASH_COMMAND}"
    if [ $exit_code -ne 0 ]; then
        echo "Error occurred during: $command"
        exit 1
    fi
}

# Trap errors and run the error handler
trap 'handle_error $?' ERR

# =============================
# Function to display usage
# =============================
usage() {
    echo "Usage: $0 -s SECRET_FILE -c CONFIGMAP_FILE"
    echo "  -s: Path to the input secret file"
    echo "  -c: Path to the output ConfigMap file"
    exit 1
}

# =============================
# Function to extract name and namespace from the secret file
# =============================
extract_metadata() {
    local secret_file="$1"
    local name namespace

    # Extract the name and namespace from the secret file
    name=$(awk '/name:/ {print $2}' "$secret_file")
    namespace=$(awk '/namespace:/ {print $2}' "$secret_file")

    # Replace '-secret' with '-configmap' in the name
    name="${name/-secret/-configmap}"

    # Check if name or namespace is empty
    if [[ -z "$name" || -z "$namespace" ]]; then
        echo "Error: Could not extract name or namespace from $secret_file."
        exit 1
    fi

    echo "$name" "$namespace"
}

# =============================
# Function to create ConfigMap from a secret
# =============================
create_configmap() {
    local secret_file="$1"
    local configmap_file="$2"
    local name namespace

    # Extract the name and namespace from the secret file
    read -r name namespace <<<"$(extract_metadata "$secret_file")"

    # Check if the secret file exists
    if [[ ! -f "$secret_file" ]]; then
        echo "Error: $secret_file does not exist."
        exit 1
    fi

    # Start writing the Kubernetes ConfigMap YAML
    echo "apiVersion: v1
kind: ConfigMap
metadata:
  name: $name
  namespace: $namespace
data:" >"$configmap_file"

    # Extract and decode each base64 encoded value from the secret file
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip lines that are not key-value pairs
        if [[ "$line" =~ ^[[:space:]]+[a-zA-Z0-9_]+:\ [a-zA-Z0-9+/=]+$ ]]; then
            # Extract the key and base64 value
            key=$(echo "$line" | awk -F ': ' '{print $1}' | xargs)
            encoded_value=$(echo "$line" | awk -F ': ' '{print $2}' | xargs)

            # Decode the base64 value
            decoded_value=$(echo "$encoded_value" | base64 --decode)

            # Append the key and decoded value to the ConfigMap file with correct YAML spacing
            echo "  $key: \"$decoded_value\"" >>"$configmap_file"
        fi
    done <"$secret_file"

    echo "ConfigMap file generated: $configmap_file"
}

# =============================
# Main script logic
# =============================
main() {
    local secret_file
    local configmap_file

    # Parse command line options
    while getopts ":s:c:" opt; do
        case $opt in
        s)
            secret_file="$OPTARG"
            ;;
        c)
            configmap_file="$OPTARG"
            ;;
        *)
            usage
            ;;
        esac
    done

    # Check if all required parameters are provided
    if [[ -z "$secret_file" || -z "$configmap_file" ]]; then
        usage
    fi

    # Create the ConfigMap from the secret
    create_configmap "$secret_file" "$configmap_file"
}

# Start the script
main "$@"
