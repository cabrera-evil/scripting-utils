#!/usr/bin/env bash
set -euo pipefail

# ===================================
# GLOBAL CONFIGURATION
# ===================================
SCRIPT_NAME="$(basename "$0")"
SCRIPT_VERSION="1.0.0"
DEBUG=false
SILENT=false

# ===================================
# UTILITIES
# ===================================
abort() {
    echo "ERROR: $1" >&2
    exit 1
}

info() {
    echo "INFO: $1"
}

success() {
    echo "SUCCESS: $1"
}

require_cmd() {
    command -v "$1" >/dev/null 2>&1 || abort "'$1' is not installed or not in PATH."
}

extract_metadata() {
    local secret_file="$1"
    local name namespace

    # Extract the name and namespace from the secret file
    name=$(awk '/name:/ {print $2}' "$secret_file")
    namespace=$(awk '/namespace:/ {print $2}' "$secret_file")

    # Replace '-secret' with '-configmap' in the name
    name="${name/-secret/-configmap}"

    # Check if name or namespace is empty
    if [[ -z "$name" || -z "$namespace" ]]; then
        abort "Could not extract name or namespace from $secret_file."
    fi

    echo "$name" "$namespace"
}

# ===================================
# COMMANDS
# ===================================

# =============================
# Function to create ConfigMap from a secret
# =============================
cmd_create() {
    local secret_file="$1"
    local configmap_file="$2"
    local name namespace

    # Extract the name and namespace from the secret file
    read -r name namespace <<<"$(extract_metadata "$secret_file")"

    # Check if the secret file exists
    if [[ ! -f "$secret_file" ]]; then
        abort "$secret_file does not exist."
    fi

    # Start writing the Kubernetes ConfigMap YAML
    echo "apiVersion: v1
kind: ConfigMap
metadata:
  name: $name
  namespace: $namespace
data:" >"$configmap_file"

    # Extract and decode each base64 encoded value from the secret file
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip lines that are not key-value pairs
        if [[ "$line" =~ ^[[:space:]]+[a-zA-Z0-9_]+:\ [a-zA-Z0-9+/=]+$ ]]; then
            # Extract the key and base64 value
            key=$(echo "$line" | awk -F ': ' '{print $1}' | xargs)
            encoded_value=$(echo "$line" | awk -F ': ' '{print $2}' | xargs)

            # Decode the base64 value
            decoded_value=$(echo "$encoded_value" | base64 --decode)

            # Append the key and decoded value to the ConfigMap file with correct YAML spacing
            echo "  $key: \"$decoded_value\"" >>"$configmap_file"
        fi
    done <"$secret_file"

    success "ConfigMap file generated: $configmap_file"
}

# ===================================
# MAIN LOGIC
# ===================================
show_help() {
    cat <<EOF
Usage: $SCRIPT_NAME <command> [options]

Commands:
  create                    Create a Kubernetes configmap from an environment file
  help                      Show this help message
  version                   Show script version

Options:
  -s <SECRET_FILE>         Path to the input secret file (YAML format)
  -c <CONFIGMAP_FILE>      Path to the output ConfigMap file (YAML format)

Examples:
  $SCRIPT_NAME create -s my-secret.yaml -c my-configmap.yaml
EOF
}

main() {
    local cmd="${1:-}"
    shift || true

    local secret_file
    local configmap_file

    while [[ $# -gt 0 ]]; do
        case $1 in
        -s)
            secret_file="$2"
            shift
            ;;
        -c)
            configmap_file="$2"
            shift
            ;;
        --*)
            abort "Unknown option: $1"
            ;;
        *)
            [[ -z "$cmd" ]] && cmd="$1" || abort "Multiple commands not allowed"
            ;;
        esac
        shift
    done

    case "$cmd" in
    create)
        cmd_create "$secret_file" "$configmap_file"
        ;;
    help | "")
        show_help
        ;;
    version)
        cmd_version
        ;;
    *)
        abort "Unknown command: $cmd. Use '$SCRIPT_NAME help' to list available commands."
        ;;
    esac
}

# Start the script
main "$@"
